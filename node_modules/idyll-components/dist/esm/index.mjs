import _extends from '@babel/runtime/helpers/extends';
import React$b, { Fragment, Component, createRef } from 'react';
import SyntaxHighlighter from 'react-syntax-highlighter/dist/light';
import style from 'react-syntax-highlighter/dist/styles/github';
import InlineSVG from 'react-inlinesvg';
import { useTable, useSortBy, usePagination } from 'react-table';
import PropTypes$1 from 'prop-types';

class Action extends React$b.PureComponent {
  render() {
    const {
      idyll,
      hasError,
      updateProps,
      ...props
    } = this.props;
    return /*#__PURE__*/React$b.createElement("span", _extends({}, props, {
      onClick: this.props.onClick ? this.props.onClick : e => e.stopPropagation(),
      className: 'idyll-action'
    }), this.props.children);
  }

}

Action._idyll = {
  name: 'Action',
  tagType: 'open',
  displayType: 'inline',
  children: ['Click me to trigger an action'],
  props: [{
    name: 'onClick',
    type: 'event',
    example: '`alert("You clicked the text.")`',
    description: 'An event that is triggered when a reader clicks.'
  }, {
    name: 'onMouseEnter',
    type: 'event',
    description: 'An event that is triggered when a reader mouses over the element, e.g. `x = true`.'
  }, {
    name: 'onMouseLeave',
    type: 'event',
    description: 'An event that is triggered when a reader removes their mouse from the element, e.g. `x = false`.'
  }]
};

class Analytics extends React$b.PureComponent {
  componentDidMount() {
    try {
      (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] || function () {
          (i[r].q = i[r].q || []).push(arguments);
        }, i[r].l = 1 * new Date();
        a = s.createElement(o), m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m);
      })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

      ga('create', this.props.google, 'auto');
      window.ga('send', 'pageview', {
        tag: this.props.tag
      });
    } catch (e) {
      console.log('Could not mount Analytics.');
    }
  }

  render() {
    return null;
  }

}

Analytics._idyll = {
  name: 'Analytics',
  tagType: 'closed',
  props: [{
    name: 'google',
    type: 'string',
    example: '"UA-XXXXXXX"',
    defaultValue: 'none',
    description: 'The google analytics Identifier.'
  }]
};

const {
  filterChildren: filterChildren$3
} = require('idyll-component-children');

class Annotation extends React$b.PureComponent {
  render() {
    const {
      children
    } = this.props;
    const annotationBox = filterChildren$3(children || [], c => {
      let name = '';

      if (c && c.props && c.props.idyllASTNode && c.props.idyllASTNode.name) {
        name = c.props.idyllASTNode.name;
      } else if (c && c._idyll && c._idyll.name) {
        name = c._idyll.name;
      } else if (c && c.type && c.type.name) {
        name = c.type.name;
      } else {
        return false;
      }

      return name.toLowerCase() === 'graphic';
    });
    const inlineText = filterChildren$3(children || [], c => {
      let name = '';

      if (c && c.props && c.props.idyllASTNode && c.props.idyllASTNode.name) {
        name = c.props.idyllASTNode.name;
      } else if (c && c._idyll && c._idyll.name) {
        name = c._idyll.name;
      } else if (c && c.type && c.type.name) {
        name = c.type.name;
      } else {
        return true;
      }

      return name.toLowerCase() !== 'graphic';
    });
    return /*#__PURE__*/React$b.createElement("div", {
      style: {
        display: 'inline'
      }
    }, ' ', /*#__PURE__*/React$b.createElement("div", {
      className: "annotated-text"
    }, inlineText, " ", /*#__PURE__*/React$b.createElement("div", {
      className: "annotation-text"
    }, annotationBox)), ' ');
  }

}

Annotation._idyll = {
  name: 'Annotation',
  tagType: 'open',
  displayType: 'inline'
};

class Aside extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement("span", {
      style: this.props.style,
      className: 'aside-container'
    }, /*#__PURE__*/React$b.createElement("span", {
      className: 'aside'
    }, this.props.children));
  }

}

Aside._idyll = {
  name: 'Aside',
  tagType: 'open',
  children: ['Content placed inside of an aside component will be displayed in the margin.']
};

class Boolean extends React$b.PureComponent {
  constructor(props) {
    super(props);
  }

  toggleCheckbox() {
    this.props.updateProps({
      value: !this.props.value
    });
  }

  render() {
    const {
      value,
      className,
      style
    } = this.props;
    return /*#__PURE__*/React$b.createElement("input", {
      type: "checkbox",
      onChange: this.toggleCheckbox.bind(this),
      onClick: this.props.onClick || (e => e.stopPropagation()),
      checked: value,
      className: `idyll-checkbox ${className ? className : ''}`.trim(),
      style: style
    });
  }

}

Boolean.defaultProps = {
  value: false
};
Boolean._idyll = {
  name: 'Boolean',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'boolean',
    example: 'x',
    description: 'A value for the checkbox. If this value is truthy, the checkbox will be shown.'
  }]
};

class Button extends React$b.PureComponent {
  render() {
    const {
      onClick,
      idyll,
      hasError,
      updateProps,
      ...props
    } = this.props;
    return /*#__PURE__*/React$b.createElement("button", _extends({}, props, {
      onClick: onClick.bind(this)
    }), this.props.children);
  }

}

Button.defaultProps = {
  onClick: function () {}
};
Button._idyll = {
  name: 'Button',
  tagType: 'open',
  children: ['Click Me.'],
  props: [{
    name: 'onClick',
    type: 'event',
    example: '`x += 1`',
    description: 'An event that is fired when the user clicks the button.'
  }]
};

const React$a = require('react');

class Case extends React$a.Component {
  render() {
    const {
      idyll,
      ...props
    } = this.props;
    return /*#__PURE__*/React$a.createElement("div", null, props.children);
  }

}

Case._idyll = {
  name: 'Case',
  tagType: 'open',
  children: ['Some text'],
  props: [{
    name: 'test',
    type: 'value',
    example: '1',
    description: 'A variable; if this is equal to the parent [Switch /] components value, the children for this case will be rendered, otherwise the default case will be rendered.'
  }]
};

const V = require('victory');

const d3Arr = require('d3-array');

const types = {
  AREA: V.VictoryArea,
  TIME: V.VictoryLine,
  LINE: V.VictoryLine,
  BAR: V.VictoryBar,
  SCATTER: V.VictoryScatter,
  PIE: V.VictoryPie
};
let chartCount = 0;

class Chart extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.id = chartCount++;
  }

  render() {
    const {
      id,
      props
    } = this;
    const type = props.type.toUpperCase();
    const INNER_CHART = types[type];
    let {
      scale,
      data,
      domain,
      range,
      domainPadding = 10,
      animate,
      theme = 'grayscale',
      ...customProps
    } = props;

    if (typeof theme === 'string') {
      theme = V.VictoryTheme[theme];
    }

    if (props.equation) {
      const d = domain;
      data = d3Arr.range(d[0], d[1], (d[1] - d[0]) / props.samplePoints).map(x => {
        try {
          return {
            x: x,
            y: props.equation(x)
          };
        } catch (err) {
          return {
            x: x,
            y: 0
          };
        }
      });
    }

    if (type === types.TIME) {
      scale = {
        x: 'time',
        y: 'linear'
      };
      data = data.map(d => {
        return Object.assign({}, d, {
          x: new Date(d.x)
        });
      });
    }

    let formattedRange = {
      domain: {
        x: domain,
        y: range
      }
    };
    return /*#__PURE__*/React$b.createElement("div", {
      style: props.style,
      className: props.className
    }, type !== 'PIE' ? /*#__PURE__*/React$b.createElement(V.VictoryChart, _extends({
      domainPadding: domainPadding
    }, formattedRange, {
      animate: animate,
      scale: scale,
      containerId: `container-${id}`,
      clipId: `clip-${id}`,
      theme: theme
    }), /*#__PURE__*/React$b.createElement(INNER_CHART, _extends({
      data: data,
      x: props.x,
      y: props.y
    }, customProps))) : /*#__PURE__*/React$b.createElement(INNER_CHART, {
      data: data,
      colorScale: props.colorScale
    }));
  }

}

Chart.defaultProps = {
  domain: [-1, 1],
  range: [-1, 1],
  domainPadding: 0,
  samplePoints: 100,
  type: 'line'
};
Chart._idyll = {
  name: 'Chart',
  tagType: 'closed',
  props: [{
    name: 'type',
    type: 'string',
    example: '"scatter"',
    defaultValue: "'line'",
    description: 'The type of the chart to display, can be `line`, `scatter`, `bar`, `pie`, or `time`. The time type is a line chart that expects the `x` values in the data to be in the temporal domain.'
  }, {
    name: 'data',
    type: 'array',
    example: '`[{year: 1, value: 1}, { year: 2, value: 2 }]`',
    description: 'A JSON object containing the data for this chart. It uses the [victory](https://formidable.com/open-source/victory/docs) library to handle rendering, so see those docs for more information on what types of data can be passed in.'
  }, {
    name: 'x',
    type: 'string',
    example: '"year"',
    defaultValue: '"x"',
    description: 'The data property to be used for the `x` dimension.'
  }, {
    name: 'y',
    type: 'string',
    example: '"value"',
    defaultValue: '"y"',
    description: 'The data property to be used for the `y` dimension.'
  }, {
    name: 'domain',
    type: 'array',
    example: '`[0, 1]`',
    defaultValue: '`[0, 1]`',
    description: 'The chart extent along the x dimension.'
  }, {
    name: 'range',
    type: 'array',
    example: '`[0, 1]`',
    defaultValue: '`[0, 1]`',
    description: 'The chart extent along the y dimension.'
  }, {
    name: 'theme',
    type: 'string',
    example: "'material'",
    defaultValue: "'grayscale'",
    description: 'The theme to use, e.g. `grayscale` or `material` or a custom object (see [an example here](https://github.com/FormidableLabs/victory/blob/master/packages/victory-core/src/victory-theme/grayscale.js))'
  }]
};

const React$9 = require('react');

const citations = [];
const referenceInstances = [];
const citationsChangeHandler = {
  set: function (target, property, value) {
    referenceInstances.forEach(referenceInstance => {
      referenceInstance.forceUpdate();
    });
    target[property] = value;
    return true;
  }
};
var citationsProxy = new Proxy(citations, citationsChangeHandler);

class References extends React$9.Component {
  constructor() {
    super();
    referenceInstances.push(this);
  }

  render() {
    if (!citations.length) {
      return null;
    }

    return /*#__PURE__*/React$9.createElement("div", {
      id: "references"
    }, /*#__PURE__*/React$9.createElement("h1", null, "References"), /*#__PURE__*/React$9.createElement("ol", null, citations.map((citation, index) => /*#__PURE__*/React$9.createElement("li", {
      key: index
    }, /*#__PURE__*/React$9.createElement("a", {
      href: citation.url,
      target: "_blank"
    }, citation.title), ", ", citation.authors, ".", /*#__PURE__*/React$9.createElement("em", null, citation.venue ? ' ' + citation.venue + '.' : ''), citation.date ? ' ' + citation.date + '.' : ''))));
  }

}

class Cite extends React$9.Component {
  constructor(props) {
    super(props);
    const {
      authors,
      url,
      title,
      date,
      venue,
      id
    } = this.props;
    const foundCitation = citationsProxy.find(citation => citation.id === id && id !== undefined);

    if (foundCitation) {
      this.state = {
        citationNumber: citationsProxy.indexOf(foundCitation) + 1,
        ...foundCitation
      };

      if (authors || title) {
        console.warn('Warning: Ignoring authors and title as Cite with the given id was declared before.');
      }
    } else if (authors && title) {
      const newCitation = {
        authors,
        url,
        title,
        date,
        venue,
        id
      };
      citationsProxy.push(newCitation);
      this.state = {
        citationNumber: citationsProxy.length,
        ...newCitation
      };
    } else {
      console.warn(`Warning: Cite with given id not found or invalid id. Check if a Cite with the id "${id}" was declared before this line.`);
      this.state = {};
    }
  }

  render() {
    const {
      citationNumber,
      authors,
      title,
      url
    } = this.state;
    return /*#__PURE__*/React$9.createElement("a", {
      style: this.props.style,
      title: `${title}, ${authors}`,
      href: url || '#references'
    }, "[", citationNumber, "]");
  }

}

Cite._idyll = {
  name: 'Cite',
  tagType: 'closed',
  props: [{
    name: 'authors',
    type: 'string',
    example: '"Matthew Conlen and Jeffrey Heer"'
  }, {
    name: 'title',
    type: 'string',
    example: '"Idyll: A Markup Language for Authoring and Publishing Interactive Articles on the Web"'
  }, {
    name: 'url',
    type: 'string',
    description: 'Link to the citation.',
    example: '"https://idl.cs.washington.edu/papers/idyll"'
  }, {
    name: 'date',
    type: 'string',
    example: '"2018"'
  }, {
    name: 'venue',
    type: 'string',
    example: '"ACM User Interface Software & Technology (UIST)"'
  }, {
    name: 'id',
    type: 'string',
    example: '"idyll-2018"',
    description: 'Can be used to refer a previously stated citation using the same id.'
  }]
};
Cite.References = References;

class CodeHighlight extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement(SyntaxHighlighter, {
      style: style,
      language: this.props.language
    }, this.props.children.length ? this.props.children[0] : '');
  }

}

CodeHighlight.defaultProps = {
  children: []
};
CodeHighlight._idyll = {
  name: "CodeHighlight",
  tagType: "open",
  children: ['var x = 1;'],
  props: [{
    name: "language",
    type: "string",
    example: "javascript"
  }]
};

const React$8 = require('react');

class Conditional extends React$8.Component {
  render() {
    const {
      idyll,
      hasError,
      updateProps,
      ...props
    } = this.props;

    if (!props.if) {
      return /*#__PURE__*/React$8.createElement("div", {
        style: {
          display: 'none'
        }
      }, props.children);
    }

    return /*#__PURE__*/React$8.createElement("div", null, props.children);
  }

}

Conditional._idyll = {
  name: 'Conditional',
  tagType: 'open',
  children: ['This text can be conditionally hidden.'],
  props: [{
    name: 'if',
    type: 'expression',
    example: '`true`',
    description: 'An expression; if this evaluates to true, the children will be rendered, otherwise nothing will be drawn to the screen'
  }]
};

const React$7 = require('react');

class Default extends React$7.Component {
  render() {
    const {
      idyll,
      ...props
    } = this.props;
    return /*#__PURE__*/React$7.createElement("div", null, props.children);
  }

}

Default._idyll = {
  name: 'Default',
  tagType: 'open',
  children: ['Some text'],
  props: []
};

const Format$1 = require('d3-format');

class Display extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.format = Format$1.format(props.format || '0.2f');
  }

  formatValue(v) {
    const t = typeof v;

    switch (t) {
      case 'object':
        return JSON.stringify(v);

      case 'boolean':
        return '' + v;

      case 'number':
        return this.format(v);

      case 'string':
      default:
        return v;
    }
  }

  render() {
    const {
      value,
      style
    } = this.props;
    const v = value !== undefined ? value : this.props.var;
    return /*#__PURE__*/React$b.createElement("span", {
      style: style,
      className: `idyll-display ${this.props.className ? this.props.className : ''}`.trim()
    }, this.formatValue(v));
  }

}

Display._idyll = {
  name: 'Display',
  tagType: 'closed',
  displayType: 'inline',
  props: [{
    name: 'value',
    type: 'any',
    example: 'x',
    description: 'The value to be displayed.'
  }, {
    name: 'format',
    type: 'string',
    example: '"0.2f"',
    description: 'The format to use, powered by [d3-format](https://github.com/d3/d3-format).'
  }]
};

const ReactDOM$1 = require('react-dom');

const Format = require('d3-format');

const Drag = require('d3-drag');

const Selection = require('d3-selection');

class Dynamic extends React$b.PureComponent {
  componentDidMount() {
    let node;

    try {
      node = ReactDOM$1.findDOMNode(this);
    } catch (e) {}

    if (!node) {
      return;
    }

    this.drag = Drag.drag().on('drag', () => {
      const dx = Selection.event.dx;
      const {
        step,
        value,
        interval
      } = this.props;
      const newValue = Math.max(Math.min(value + (step || interval) * dx, this.props.max), this.props.min);
      this.props.updateProps({
        value: newValue
      });
    });
    this.drag(Selection.select(node));
  }

  transformValue() {
    const {
      format,
      value,
      display
    } = this.props;
    const formatter = Format.format(format);

    if (display !== undefined) {
      if (typeof display === 'string') {
        return display;
      }

      return formatter(display);
    }

    return formatter(value);
  }

  render() {
    const display = this.transformValue();
    return /*#__PURE__*/React$b.createElement("span", {
      onClick: this.props.onClick || (e => e.stopPropagation()),
      style: this.props.style,
      className: "idyll-dynamic"
    }, display);
  }

}

Dynamic.defaultProps = {
  format: '.2f',
  min: Number.NEGATIVE_INFINITY,
  max: Number.POSITIVE_INFINITY,
  step: 1,
  interval: 0,
  display: undefined
};
Dynamic._idyll = {
  name: 'Dynamic',
  tagType: 'closed',
  displayType: 'inline',
  props: [{
    name: 'value',
    type: 'number',
    example: 'x',
    description: 'The value to display.'
  }, {
    name: 'step',
    type: 'string',
    example: '1',
    defaultValue: '1',
    description: 'The granularity of the changes.'
  }, {
    name: 'min',
    type: 'number',
    example: '-100',
    defaultValue: 'none',
    description: 'The minimum value.'
  }, {
    name: 'max',
    type: 'number',
    example: '100',
    defaultValue: 'none',
    description: 'The maximum value.'
  }, {
    name: 'display',
    type: 'expression',
    defaultValue: 'none',
    description: 'A custom display transform to use'
  }]
};

let desmosGraphCount = 0;
const desmosApiUrl = 'https://www.desmos.com/api/v1.1/calculator.js?apiKey=';
const desmosApiKey = 'dcb31709b452b1cf9dc26972add0fda6';

class Desmos extends React$b.Component {
  constructor(props) {
    super(props);
    this.state = {
      id: this.props.id ? this.generateId(this.props.id) : `desmos-${desmosGraphCount++}`
    };

    if ((!this.props.apiKey || this.props.apiKey === desmosApiKey) && typeof window === 'undefined') {
      console.warn(`\nWarning! You are using default API key for desmos. If you plan to use Desmos in production you should obtain a key from https://www.desmos.com/api/v1.3/docs/index.html#document-api-keys and supply it as the apiKey parameter.\n`);
    }

    this.getCurrentLatex = this.getCurrentLatex.bind(this);
  }

  render() {
    const {
      idyll,
      hasError,
      updateProps,
      apiKey,
      equation,
      height = 400,
      width,
      id,
      style,
      ...attributeProps
    } = this.props;
    return /*#__PURE__*/React$b.createElement("div", _extends({
      id: this.state.id,
      style: { ...style,
        height,
        width
      }
    }, attributeProps));
  }

  generateId(id = '') {
    return id.toString().trim().replace(/\s+/g, '-').toLowerCase();
  }

  getCurrentLatex() {
    if (!this.calculator) {
      return;
    }

    const {
      expressions
    } = this.calculator.getState();
    const filteredExpressions = expressions.list.filter(d => d.type === 'expression');

    if (filteredExpressions.length) {
      return filteredExpressions[0].latex;
    }
  }

  generateGraph(equation) {
    const {
      id
    } = this.state;
    document.getElementById(id).innerHTML = '';
    const elt = document.getElementById(id);
    const calculator = window.Desmos.GraphingCalculator(elt);

    if (equation) {
      calculator.setExpression({
        latex: equation
      });
    } else {
      calculator.setBlank();
    }

    this.calculator = calculator; // Have to pull these functions out because
    // `observeEvent` won't work with an arrow
    // function.

    const {
      updateProps
    } = this.props;
    const {
      getCurrentLatex
    } = this; // Catch changes when a user edits the
    // calculator.

    calculator.observeEvent('change', function () {
      const latex = getCurrentLatex();

      if (latex) {
        updateProps({
          equation: latex
        });
      }
    });
  }

  componentDidUpdate(prevProps) {
    const {
      equation
    } = this.props; // Only instantiate & update the calculator
    // when necessary to improve performance.

    if (equation !== prevProps.equation && equation !== this.getCurrentLatex()) {
      if (this.calculator) {
        const newState = this.calculator.getState();
        newState.expressions.list[0].type = 'expression';
        newState.expressions.list[0].latex = equation;
        this.calculator.setState(newState);
      } else {
        this.generateGraph(equation);
      }
    }
  }

  componentDidMount() {
    const {
      apiKey = desmosApiKey,
      equation
    } = this.props;
    const script = document.createElement('script');
    script.src = `${desmosApiUrl + apiKey}`;
    script.async = true;
    document.body.appendChild(script);

    script.onload = () => {
      this.generateGraph(equation);
    };
  }

}

Desmos._idyll = {
  name: 'Desmos',
  tagType: 'closed',
  props: [{
    name: 'apiKey',
    type: 'string',
    example: '"dcb31709b452b1cf9dc26972add0fda6"'
  }, {
    name: 'equation',
    type: 'string',
    example: '"y=x^2"'
  }, {
    name: 'id',
    type: 'string',
    example: '"linear-equation"'
  }, {
    name: 'height',
    type: 'string',
    example: '"400px"'
  }, {
    name: 'width',
    type: 'string',
    example: '"100%"'
  }]
};

const ReactDOM = require('react-dom');

const Latex = require('react-latex-patched');

const select = require('d3-selection').select;

const format = require('d3-format').format;

const allowedProps = ['domain', 'step', 'children'];

class Equation extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      showRange: false
    };
  }

  handleChange(event) {
    this.props.updateProps({
      value: +event.target.value
    });
  }

  componentDidMount() {
    let dom;
    const cssId = 'idyll-equation-css'; // you could encode the css path itself to generate id..

    const cssURL = '//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css';

    if (document && !document.getElementById(cssId) && !this.props.skipCSS && !select(`link[href='${cssURL}']`).size()) {
      const heads = document.getElementsByTagName('head');

      if (heads.length) {
        const head = heads[0];
        const link = document.createElement('link');
        link.id = cssId;
        link.href = cssURL;
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.media = 'all';
        head.appendChild(link);
      }
    }

    try {
      dom = ReactDOM.findDOMNode(this);
    } catch (e) {}

    if (!dom) {
      return;
    }

    this.propNodes = {};
    const self = this;
    select(dom).selectAll('.mord').each(function (d) {
      const $this = select(this);
      Object.keys(self.props).filter(prop => {
        return allowedProps.indexOf(prop) === -1;
      }).forEach(prop => {
        if ($this.text() === prop) {
          self.propNodes[prop] = $this;
          $this.style('cursor', 'pointer');
          $this.on('mouseover', () => {
            $this.style('color', 'red');
          }).on('mouseout', () => {
            if (!(self.state.showRange && self.state.var === prop)) {
              $this.style('color', 'black');
            }
          }).on('click', () => {
            if (!(self.state.showRange && self.state.var === prop)) {
              self.setState({
                showRange: true,
                var: prop
              });
              $this.text(self.props[prop]);
              $this.style('color', 'red');
              Object.keys(self.propNodes).filter(d => d !== prop).forEach(d => {
                self.propNodes[d].text(d);
                self.propNodes[d].style('color', 'black');
              });
            } else {
              self.setState({
                showRange: false,
                var: prop
              });
              $this.style('color', 'black');
              $this.text(prop);
            }
          });
        }
      });
    });
  }

  handleRangeUpdate(event) {
    const newProps = {};
    const val = +event.target.value;
    newProps[this.state.var] = val;
    this.props.updateProps(newProps);
    this.propNodes[this.state.var].text(val);
  }

  renderEditing() {
    if (!this.state.showRange) {
      return null;
    }

    const d = (this.props.domain || {})[this.state.var] || [-10, 10];
    const step = (this.props.step || {})[this.state.var] || 0.1;
    return /*#__PURE__*/React$b.createElement("div", {
      style: {
        paddingTop: 15,
        textAlign: 'center'
      }
    }, /*#__PURE__*/React$b.createElement("input", {
      type: "range",
      value: format('0.1f')(this.props[this.state.var]),
      min: d[0],
      max: d[1],
      onChange: this.handleRangeUpdate.bind(this),
      step: step
    }));
  }

  getLatex() {
    if (this.props.latex) {
      return this.props.latex;
    }

    return this.props.children && this.props.children[0] ? this.props.children[0] : '';
  }

  render() {
    const latexChar = '$';
    const latexString = latexChar + this.getLatex() + latexChar;
    let style;

    if (this.state.showRange) {
      style = this.props.style;
    } else {
      style = Object.assign({
        display: this.props.display ? 'block' : 'inline-block'
      }, this.props.style);
    }

    return /*#__PURE__*/React$b.createElement("span", {
      style: style
    }, /*#__PURE__*/React$b.createElement(Latex, {
      displayMode: this.props.display
    }, latexString), this.renderEditing());
  }

}

Equation._idyll = {
  name: 'Equation',
  tagType: 'closed',
  props: [{
    name: 'latex',
    type: 'expression',
    example: '`"x = " + x`',
    defaultValue: '"x"',
    description: 'Set the latex to be shown. Can be driven by an expression to allow for dynamically updated equations.'
  }, {
    name: 'display',
    type: 'boolean',
    example: 'true',
    defaultValue: 'false',
    description: 'Set to `true` for a centered, standalone equation, set to `false` for an inline equation.'
  }]
};

class Fixed extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement("div", {
      style: {
        position: 'fixed',
        ...this.props.style
      },
      className: "fixed"
    }, this.props.children);
  }

}

Fixed._idyll = {
  name: 'Fixed',
  tagType: 'open',
  children: ['Content placed inside of a fixed component will be remain fixed in the margin.']
};

class Float extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement("div", {
      className: `float ${this.props.position}`,
      style: {
        float: this.props.position,
        width: this.props.width || '50%',
        ...this.props.style
      }
    }, this.props.children);
  }

}

Float._idyll = {
  name: 'Float',
  tagType: 'open',
  children: [`Content placed here will take up half of the text-column width. Use the properties to specify left or right.`],
  props: [{
    name: 'position',
    type: 'string',
    example: '"left"',
    description: 'the float position: left or right.'
  }, {
    name: 'width',
    type: 'string',
    example: '"50%"',
    defaultValue: '"50%"',
    description: 'the width of the component, specified in pixels or percentage.'
  }]
};

const PropTypes = require('prop-types');

class EmbeddedGist extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.gist = props.gist;
    this.file = props.file;
    this.stylesheetAdded = false;
    this.state = {
      loading: true,
      src: ''
    };
  } // The Gist JSON data includes a stylesheet to add to the page
  // to make it look correct. `addStylesheet` ensures we only add
  // the stylesheet one time.


  addStylesheet(href) {
    if (!this.stylesheetAdded) {
      this.stylesheetAdded = true;
      var link = document.createElement('link');
      link.type = 'text/css';
      link.rel = 'stylesheet';
      link.href = href;
      (document.head || document.body || {
        appendChild: () => {}
      }).appendChild(link);
    }
  }

  componentDidMount() {
    // Create a JSONP callback that will set our state
    // with the data that comes back from the Gist site
    var gistCallback = EmbeddedGist.nextGistCallback();

    window[gistCallback] = function (gist) {
      this.setState({
        loading: false,
        src: gist.div
      });
      this.addStylesheet(gist.stylesheet);
    }.bind(this);

    var url = 'https://gist.github.com/' + this.props.gist + '.json?callback=' + gistCallback;

    if (this.props.file) {
      url += '&file=' + this.props.file;
    } // Add the JSONP script tag to the document.


    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    (document.head || document.body || {
      appendChild: () => {}
    }).appendChild(script);
  }

  render() {
    if (this.state.loading) {
      return /*#__PURE__*/React$b.createElement("div", null, "loading...");
    } else {
      return /*#__PURE__*/React$b.createElement("div", {
        style: this.props.style,
        dangerouslySetInnerHTML: {
          __html: this.state.src
        }
      });
    }
  }

}

EmbeddedGist.propTypes = {
  gist: PropTypes.string.isRequired,
  // e.g. "username/id"
  file: PropTypes.string // to embed a single specific file from the gist

}; // Each time we request a Gist, we'll need to generate a new
// global function name to serve as the JSONP callback.

var gistCallbackId = 0;

EmbeddedGist.nextGistCallback = () => {
  return 'embed_gist_callback_' + gistCallbackId++;
};

EmbeddedGist.defaultProps = {
  gist: 'mathisonian/689614257cb1af6b15de3344da6cdc7a'
};
EmbeddedGist._idyll = {
  name: 'Gist',
  tagType: 'closed',
  props: [{
    name: 'gist',
    type: 'string',
    example: '"0f83a12e29b268ffca39f471ecf39e91"',
    description: 'The ID of the gist from github. Required.'
  }, {
    name: 'file',
    type: 'string',
    example: '"particles.idl"',
    description: 'A file within the Gist to show. Optional'
  }]
};

const React$6 = require('react');

class Graphic extends React$6.Component {
  render() {
    const {
      idyll,
      updateProps,
      hasError,
      ...props
    } = this.props;
    return /*#__PURE__*/React$6.createElement("div", _extends({
      className: "idyll-graphic"
    }, props));
  }

}

Graphic._idyll = {
  name: 'Graphic',
  tagType: 'open'
};

const byLineDefault = {
  prefix: 'By:',
  joint: ',',
  suffix: 'and'
};

const additionalTextByIndex = (authors, suffix, joint, index) => {
  const map = {
    [authors.length - 1]: '',
    [authors.length - 2]: ` ${suffix} `
  };
  return index in map ? map[index] : `${joint} `;
};

const AuthorLink = ({
  name,
  link,
  color
}) => /*#__PURE__*/React$b.createElement("a", {
  target: "_blank",
  href: link,
  style: {
    color: color
  }
}, name);

const ByLineMultipleAuthors = ({
  authors,
  prefix,
  joint,
  suffix,
  color
}) => /*#__PURE__*/React$b.createElement("div", {
  className: 'byline'
}, `${prefix} `, authors.map((author, i) => {
  const authorDisplay = typeof author === 'string' ? author : author.name;
  return /*#__PURE__*/React$b.createElement("span", {
    key: authorDisplay
  }, typeof author.link === 'string' ? /*#__PURE__*/React$b.createElement(AuthorLink, _extends({}, author, {
    color: color
  })) : authorDisplay, additionalTextByIndex(authors, suffix, joint, i));
}));

class Header extends React$b.PureComponent {
  render() {
    const {
      background,
      color,
      byLineTemplate,
      idyll
    } = this.props;
    const {
      joint,
      prefix,
      suffix
    } = { ...byLineDefault,
      ...byLineTemplate
    };

    const _background = background || (idyll && idyll.theme ? idyll.theme.headerBackground : undefined);

    const _color = color || (idyll && idyll.theme ? idyll.theme.headerColor : undefined);

    return /*#__PURE__*/React$b.createElement("div", {
      className: 'article-header',
      style: {
        background: _background,
        color: _color,
        ...this.props.style
      }
    }, /*#__PURE__*/React$b.createElement("h1", {
      className: 'hed'
    }, this.props.title), this.props.subtitle && /*#__PURE__*/React$b.createElement("h2", {
      className: 'dek'
    }, this.props.subtitle), this.props.author && /*#__PURE__*/React$b.createElement("div", {
      className: 'byline'
    }, `${prefix.trim()} `, /*#__PURE__*/React$b.createElement("a", {
      target: "_blank",
      href: this.props.authorLink,
      style: {
        color: _color
      }
    }, this.props.author)), !!this.props.authors && /*#__PURE__*/React$b.createElement(ByLineMultipleAuthors, {
      authors: this.props.authors,
      prefix: prefix.trim(),
      joint: joint.trim(),
      suffix: suffix.trim(),
      color: _color
    }), this.props.date && /*#__PURE__*/React$b.createElement("div", {
      className: 'idyll-pub-date'
    }, this.props.date));
  }

}

Header._idyll = {
  name: 'Header',
  tagType: 'closed',
  props: [{
    name: 'title',
    type: 'string',
    example: '"Article Title"'
  }, {
    name: 'subtitle',
    type: 'string',
    example: '"Article subtitle."'
  }, {
    name: 'author',
    type: 'string'
  }, {
    name: 'authorLink',
    type: 'string'
  }, {
    name: 'authors',
    type: 'array',
    example: "`[{name: 'Jane Doe', link: 'https://website.com'}]`",
    description: 'An array of authors. Each element of the array can be an object or a string.'
  }, {
    name: 'date',
    type: 'string',
    example: '"December 25, 2018"',
    description: 'The publication date.'
  }, {
    name: 'background',
    type: 'string',
    example: '"#999"',
    description: 'The background of the header. Can pass a color or a url().'
  }, {
    name: 'byLineTemplate',
    type: 'object',
    example: "`{ prefix: 'Made by', joint: ' ', suffix: '&' }`",
    description: 'Optional template to use in by line.'
  }, {
    name: 'color',
    type: 'string',
    example: '"#000"',
    description: 'The text color of the header.'
  }]
};

const generateId = (headerText = '') => {
  return headerText.toString().trim().replace(/\s+/g, '-').toLowerCase();
};

const GenerateHeaders = props => {
  const {
    idyll,
    hasError,
    updateProps,
    size,
    children = [],
    ...attributeProps
  } = props;
  const headerText = children.join('');
  const HeaderTag = `h${size}`;

  if (!attributeProps.id) {
    attributeProps.id = generateId(headerText);
  }

  return /*#__PURE__*/React$b.createElement(HeaderTag, attributeProps, children);
};

class H1 extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement(GenerateHeaders, _extends({
      size: "1"
    }, this.props));
  }

}

H1._idyll = {
  name: 'H1',
  tagType: 'open',
  children: ['My Header Size 1']
};

class H2 extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement(GenerateHeaders, _extends({
      size: "2"
    }, this.props));
  }

}

H2._idyll = {
  name: 'H2',
  tagType: 'open',
  children: ['My Header Size 2']
};

class H3 extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement(GenerateHeaders, _extends({
      size: "3"
    }, this.props));
  }

}

H3._idyll = {
  name: 'H3',
  tagType: 'open',
  children: ['My Header Size 3']
};

class H4 extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement(GenerateHeaders, _extends({
      size: "4"
    }, this.props));
  }

}

H4._idyll = {
  name: 'H4',
  tagType: 'open',
  children: ['My Header Size 4']
};

class H5 extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement(GenerateHeaders, _extends({
      size: "5"
    }, this.props));
  }

}

H5._idyll = {
  name: 'H5',
  tagType: 'open',
  children: ['My Header Size 5']
};

class H6 extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement(GenerateHeaders, _extends({
      size: "6"
    }, this.props));
  }

}

H6._idyll = {
  name: 'H6',
  tagType: 'open',
  children: ['My Header Size 6']
};

const React$5 = require('react');

class Image$1 extends React$5.Component {
  render() {
    const {
      hasError,
      idyll,
      updateProps,
      ...props
    } = this.props;
    return /*#__PURE__*/React$5.createElement("img", props);
  }

}

Image$1._idyll = {
  name: 'Image',
  tagType: 'closed',
  props: [{
    name: 'src',
    type: 'string',
    example: `"https://placebear.com/600/320"`
  }, {
    name: 'style',
    type: 'expression',
    example: `\`{
  width: "100%",
  height: "auto",
  display: "block",
  margin: "1em auto",
  minHeight: 320
}\``
  }]
};

class Inline extends React$b.PureComponent {
  render() {
    return /*#__PURE__*/React$b.createElement("div", {
      style: {
        display: 'inline-block',
        ...this.props.style
      }
    }, this.props.children);
  }

}

Inline._idyll = {
  name: 'Inline',
  tagType: 'open',
  children: [`[div style:\`{width: 100, height: 100, background: red}\` /][div style:\`{width: 100, height: 100, background: blue}\` /][div style:\`{width: 100, height: 100, background: green}\` /]`]
};

class Link extends React$b.PureComponent {
  constructor(props) {
    super(props);
  }

  render() {
    const {
      idyll,
      hasError,
      updateProps,
      ...props
    } = this.props;
    let passProps = { ...props
    };

    if (passProps.url) {
      passProps.href = passProps.url;
    }

    return /*#__PURE__*/React$b.createElement("a", passProps, props.text || props.children);
  }

}

Link._idyll = {
  name: 'Link',
  tagType: 'closed',
  displayType: 'inline',
  props: [{
    name: 'text',
    type: 'string',
    example: '"This is a hyperlink"',
    description: 'The text to display'
  }, {
    name: 'url',
    type: 'string',
    example: '"https://idyll-lang.org/"',
    description: 'The URL to open when the link is clicked'
  }, {
    name: 'target',
    type: 'string',
    example: '"_blank"',
    description: 'Specifies where to open the linked document'
  }]
};

const React$4 = require('react');

const {
  mapChildren: mapChildren$2
} = require('idyll-component-children');

class Loop extends React$4.Component {
  render() {
    const {
      children,
      value
    } = this.props;

    if (children) {
      return value.map(val => {
        return mapChildren$2(children, child => {
          if (typeof child !== 'object') {
            return child;
          }

          let newProps = Object.assign({}, child.props);
          newProps = Object.keys(child.props).reduce((props, elm) => {
            if (props[elm] === '_iterator') {
              props[elm] = val;
              return props;
            }

            return props;
          }, newProps);
          return React$4.cloneElement(child, { ...newProps
          });
        });
      });
    }

    return null;
  }

}

Loop._idyll = {
  name: 'Loop',
  tagType: 'open',
  children: ['Item [Display value:"_iterator" /] [br/]'],
  props: [{
    name: 'value',
    type: 'array',
    example: "`['one', 'two', 'three']`",
    description: 'Array of values to map.'
  }]
};

require('react-dom');

class Preloader extends React$b.PureComponent {
  componentDidMount() {
    const {
      images
    } = this.props;
    images.forEach(i => {
      const img = new Image();
      img.src = i;
    });
  }

  render() {
    return null;
  }

}

Preloader.defaultProps = {
  images: []
};
Preloader._idyll = {
  name: 'Preloader',
  tagType: 'closed',
  displayType: 'inline',
  props: [{
    name: 'images',
    type: 'array',
    description: 'the array of images: `["image-url-1.png", "image-url-2.jpg"]`.',
    example: '["image-url-1.png", "image-url-2.jpg"]'
  }]
};

class Preview extends React$b.Component {
  constructor(props) {
    super(props);
    this.state = {
      mounted: false
    };
  }

  componentDidMount() {
    this.setState({
      mounted: true
    });
  }

  render() {
    const {
      hasError,
      idyll,
      updateProps,
      title,
      description,
      cardSize,
      url,
      media,
      ...props
    } = this.props;

    if (!this.state.mounted) {
      return /*#__PURE__*/React$b.createElement("a", {
        href: url
      }, title, " - ", description);
    }

    const ReactTinyLink = require('react-tiny-link').ReactTinyLink;

    if (this.props.media) {
      return /*#__PURE__*/React$b.createElement(ReactTinyLink, {
        header: title,
        description: description,
        cardSize: cardSize,
        showGraphic: true,
        url: url,
        defaultMedia: media
      });
    }

    return /*#__PURE__*/React$b.createElement(ReactTinyLink, {
      header: title,
      description: description,
      showGraphic: false,
      url: url
    });
  }

}

Preview._idyll = {
  name: 'Preview',
  tagType: 'closed',
  props: [{
    name: 'title',
    type: 'string',
    example: '"This is the preview title"',
    description: 'The title text to display on the card'
  }, {
    name: 'description',
    type: 'string',
    example: '"This is the preview description"',
    description: 'The description text to display on the card'
  }, {
    name: 'cardSize',
    type: 'string',
    example: '"small"',
    description: 'Designate size of the preview card, can be small or large'
  }, {
    name: 'url',
    type: 'string',
    example: '"https://idyll-lang.org/"',
    description: 'The URL to open when the link is clicked'
  }, {
    name: 'media',
    type: 'string',
    example: '"https://placebear.com/600/320"',
    description: 'The media url or directory of the image or gif'
  }]
};

require('react-dom');

let id$1 = 0;

class Radio extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.onChange = this.onChange.bind(this);
    this.id = id$1++;
  }

  onChange(e) {
    this.props.updateProps({
      value: e.target.value
    });
  }

  render() {
    const {
      idyll,
      hasError,
      updateProps,
      options,
      value,
      ...props
    } = this.props;
    return /*#__PURE__*/React$b.createElement("div", _extends({}, props, {
      onClick: this.props.onClick || (e => e.stopPropagation())
    }), options.map(d => {
      if (typeof d === 'string') {
        return /*#__PURE__*/React$b.createElement("label", {
          key: d
        }, /*#__PURE__*/React$b.createElement("input", {
          type: "radio",
          checked: d === value,
          onChange: this.onChange,
          value: d,
          name: this.id
        }), d);
      }

      return /*#__PURE__*/React$b.createElement("label", {
        key: d.value
      }, /*#__PURE__*/React$b.createElement("input", {
        type: "radio",
        checked: d.value === value,
        onChange: this.onChange,
        value: d.value,
        name: this.id
      }), d.label || d.value);
    }));
  }

}

Radio.defaultProps = {
  options: []
};
Radio._idyll = {
  name: 'Radio',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'string',
    example: 'x',
    description: 'The value of the "checked" radio button'
  }, {
    name: 'options',
    type: 'array',
    example: '`["option1", "option2"]`',
    description: 'an array representing the different buttons. Can be an array of strings like `["val1", "val2"]` or an array of objects `[{ value: "val1", label: "Value 1" }, { value: "val2", label: "Value 2" }]`.'
  }]
};

class Range extends React$b.PureComponent {
  constructor(props) {
    super(props);
  }

  handleChange(event) {
    event.stopPropagation();
    this.props.updateProps({
      value: +event.target.value
    });
    return false;
  }

  render() {
    const {
      value,
      min,
      max,
      step,
      style
    } = this.props;
    return /*#__PURE__*/React$b.createElement("input", {
      type: "range",
      onChange: this.handleChange.bind(this),
      value: value,
      min: min,
      max: max,
      step: step,
      style: style,
      onClick: this.props.onClick || (e => e.stopPropagation())
    });
  }

}

Range.defaultProps = {
  value: 0,
  min: 0,
  max: 1,
  step: 1
};
Range._idyll = {
  name: 'Range',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'number',
    example: 'x',
    description: 'The value to display; if this is a variable, the variable will automatically be updated when the slider is moved.'
  }, {
    name: 'min',
    type: 'number',
    example: '0',
    description: 'The minimum value.'
  }, {
    name: 'max',
    type: 'number',
    example: '100',
    description: 'The maximum value.'
  }, {
    name: 'step',
    type: 'number',
    example: '1',
    defaultValue: '1',
    description: 'The granularity of the slider.'
  }]
};

class TextContainer extends React$b.PureComponent {
  render() {
    const {
      idyll,
      children,
      className,
      hasError,
      updateProps,
      ...props
    } = this.props;
    const cn = (className || '') + ' idyll-text-container';
    return /*#__PURE__*/React$b.createElement("div", _extends({}, props, {
      className: cn
    }), children);
  }

}

TextContainer._idyll = {
  name: 'TextContainer',
  tagType: 'open',
  children: ['This is my text.']
};

const React$3 = require('react');

const {
  filterChildren: filterChildren$2,
  mapChildren: mapChildren$1
} = require('idyll-component-children');

const d3 = require('d3-selection');

const styles$1 = {
  SCROLL_GRAPHIC: {
    top: 0,
    left: 0,
    right: 0,
    bottom: 'auto',
    width: '100%',
    transform: `translate3d(0, 0, 0)`,
    zIndex: 0
  },
  SCROLL_GRAPHIC_INNER: {
    position: 'absolute',
    // right: '1rem',
    left: 0,
    right: 0,
    top: '50%',
    transform: 'translateY(-50%)'
  }
};
let id = 0;

class Scroller extends React$3.Component {
  constructor(props) {
    super(props);
    this.id = id++;
    this.state = {
      graphicHeight: 0,
      graphicWidth: 0
    };
    this.SCROLL_STEP_MAP = {};
    this.SCROLL_NAME_MAP = {};
  }

  componentDidMount() {
    require('intersection-observer');

    const scrollama = require('./scrollama'); // instantiate the scrollama


    const scroller = scrollama(); // setup the instance, pass callback functions

    scroller.setup({
      step: `#idyll-scroll-${this.id} .idyll-step`,
      // required
      progress: this.props.progress !== undefined ? true : false,
      debug: this.props.debug,
      offset: this.props.offset
    }).onStepEnter(this.handleStepEnter.bind(this)).onStepProgress(this.handleStepProgress.bind(this)); // setup resize event

    this.scroller = scroller;
    this.handleResize();
    window.addEventListener('resize', this.handleResize.bind(this));
  }

  handleStepEnter({
    element,
    index,
    direction
  }) {
    this.SCROLL_STEP_MAP[index] && this.SCROLL_STEP_MAP[index]();
    let update = {
      currentStep: index
    };

    if (this.SCROLL_NAME_MAP[index]) {
      update.currentState = this.SCROLL_NAME_MAP[index];
    }

    this.props.updateProps && this.props.updateProps(update);

    if (index === Object.keys(this.SCROLL_STEP_MAP).length - 1) {
      d3.select('body').style('overflow', 'auto');
    }
  }

  handleResize() {
    this.setState({
      graphicHeight: window.innerHeight + 'px',
      graphicWidth: window.innerWidth + 'px'
    }); // this.scroller.resize();
  }

  handleStepProgress(response) {
    const {
      progress
    } = response;
    const update = {
      progress
    };
    this.props.updateProps && this.props.updateProps(update);
  }

  componentDidUpdate(prevProps) {
    if (this.props.disableScroll && this.props.currentStep !== prevProps.currentStep) {
      d3.selectAll(`#idyll-scroll-${this.id} .idyll-step`).filter(function (d, i) {
        return i === this.props.currentStep;
      }).node().scrollIntoView({
        behavior: 'smooth'
      });
    }

    if (this.props.disableScroll && this.props.currentState !== prevProps.currentState) {
      d3.selectAll(`#idyll-scroll-${this.id} .idyll-step`).filter((d, i) => this.props.currentState === this.SCROLL_NAME_MAP[i]).node().scrollIntoView({
        behavior: 'smooth'
      });
    }

    if (this.props.disableScroll && (!this.props.currentStep || this.props.currentStep < Object.keys(this.SCROLL_STEP_MAP).length - 1)) {
      d3.select('body').style('overflow', 'hidden');
    }
  }

  registerStep(elt, name, val) {
    this.SCROLL_STEP_MAP[elt] = val;
    this.SCROLL_NAME_MAP[elt] = name;
  }

  render() {
    const {
      hasError,
      updateProps,
      idyll,
      children,
      ...props
    } = this.props;
    const {
      graphicHeight,
      graphicWidth
    } = this.state;
    const graphicChildren = filterChildren$2(children, c => {
      return c.type.name && c.type.name.toLowerCase() === 'graphic';
    });
    const StepContainer = props.fullWidthSteps ? 'div' : TextContainer;
    let stepIndex = 0;
    return /*#__PURE__*/React$3.createElement("div", {
      ref: ref => this.ref = ref,
      className: "idyll-scroll",
      id: `idyll-scroll-${this.id}`,
      style: Object.assign({
        position: 'relative'
      })
    }, graphicChildren && graphicChildren.length ? /*#__PURE__*/React$3.createElement("div", {
      className: "idyll-scroll-graphic",
      style: Object.assign({}, styles$1.SCROLL_GRAPHIC, {
        height: graphicHeight,
        zIndex: idyll && idyll.authorView ? 0 : -1
      })
    }, /*#__PURE__*/React$3.createElement("div", {
      style: Object.assign({
        width: graphicWidth
      }, styles$1.SCROLL_GRAPHIC_INNER)
    }, graphicChildren)) : null, /*#__PURE__*/React$3.createElement(StepContainer, {
      idyll: idyll
    }, /*#__PURE__*/React$3.createElement("div", {
      className: "idyll-scroll-text"
    }, mapChildren$1(filterChildren$2(children, c => {
      return !c.type.name || c.type.name.toLowerCase() === 'step';
    }), c => {
      return React$3.cloneElement(c, {
        registerStep: this.registerStep.bind(this),
        stepIndex: stepIndex++
      });
    }))));
  }

}

Scroller._idyll = {
  name: 'Scroller',
  tagType: 'open',
  children: [`
  [Graphic fullWidth:true]
    [VegaLite
      data:\`[{x: 0, y: 0}, {x: 1, y: 1}]\`
      spec:\`{
      mark: "line",
      encoding: {
        x: {
          field: "x",
          type: "quantitative"
        },
        y: {
          field: "y",
          type: "quantitative"
        }
      }
    }\`
    width:"container"
    height:300 /]
  [/Graphic]
  [Step]This is the content for step 1[/Step]
  [Step]This is the content for step 2[/Step]
  [Step]This is the content for step 3[/Step]`],
  props: [{
    name: 'currentStep',
    type: 'variable',
    example: 'x',
    description: 'The index of the currently selected step.'
  }, {
    name: 'fullWidth',
    type: 'boolean',
    example: 'true',
    description: 'Is this component fullWidth.'
  }, {
    name: 'currentState',
    type: 'object',
    description: 'The state value associated with the currently selected step. Note you must set the state property on the step components for this value to update.'
  }, {
    name: 'progress',
    type: 'number',
    description: 'The percent of completion (0-1) of the currently selected step'
  }, {
    name: 'offset',
    type: 'number',
    description: '(number 0 - 1, or string with "px"): How far from the top of the viewport to trigger a step. (default: 0.5) (middle of screen)'
  }, {
    name: 'debug',
    type: 'boolean',
    description: 'Show scroller debug information.'
  }]
};

require('react-dom');

class Select extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.onChange = this.onChange.bind(this);
  }

  onChange(e) {
    this.props.updateProps({
      value: e.target.value
    });
  }

  render() {
    const {
      idyll,
      hasError,
      updateProps,
      ...props
    } = this.props;
    return /*#__PURE__*/React$b.createElement("select", _extends({
      onChange: this.onChange
    }, props, {
      onClick: this.props.onClick || (e => e.stopPropagation())
    }), this.props.options.map(d => {
      if (typeof d === 'string') {
        return /*#__PURE__*/React$b.createElement("option", {
          key: d,
          value: d
        }, d);
      }

      return /*#__PURE__*/React$b.createElement("option", {
        key: d.label || d.value,
        value: d.value
      }, d.label || d.value);
    }));
  }

}

Select.defaultProps = {
  options: []
};
Select._idyll = {
  name: 'Select',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'string',
    example: 'x',
    description: 'The currently selected value.'
  }, {
    name: 'options',
    type: 'array',
    example: '`["option1", "option2"]`',
    description: 'An array representing the different options. Can be an array of strings like `["val1", "val2"]` or an array of objects `[{ value: "val1", label: "Value 1" }, { value: "val2", label: "Value 2" }]`.'
  }]
};

let idx = 0;

class Step extends React$b.Component {
  componentDidMount() {
    let _idx = this.props.stepIndex === undefined ? idx++ : this.props.stepIndex;

    this.props.registerStep && this.props.registerStep(_idx, this.props.state, (this.props.onEnter || (() => {})).bind(this));
  }

  render() {
    const {
      idyll,
      updateProps,
      hasError,
      registerStep,
      onEnter,
      state,
      className,
      stepIndex,
      ...props
    } = this.props;
    return /*#__PURE__*/React$b.createElement("div", _extends({
      ref: ref => this.ref = ref,
      className: `idyll-step ${className || ''}`
    }, props));
  }

}

Step._idyll = {
  name: 'Step',
  tagType: 'open'
};

const {
  filterChildren: filterChildren$1,
  mapChildren
} = require('idyll-component-children');

class Stepper extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.SCROLL_STEP_MAP = {};
    this.SCROLL_NAME_MAP = {};
  }

  registerStep(elt, name, val) {
    this.SCROLL_STEP_MAP[elt] = val;
    this.SCROLL_NAME_MAP[elt] = name;
  }

  getSteps() {
    return filterChildren$1(this.props.children || [], c => {
      return c.type.name && c.type.name.toLowerCase() === 'step';
    }) || [];
  }

  next() {
    let newStep = this.props.currentStep + 1;

    if (!newStep) {
      newStep = 1;
    }

    if (newStep >= this.getSteps().length) {
      newStep = 0;
    }

    this.props.updateProps({
      currentStep: newStep
    });
  }

  previous() {
    let newStep = this.props.currentStep - 1;

    if (newStep < 0) {
      newStep = this.getSteps().length + newStep;
    }

    this.props.updateProps({
      currentStep: newStep
    });
  }

  getSelectedStep() {
    const {
      currentState,
      currentStep
    } = this.props;
    const steps = this.getSteps();

    if (currentState) {
      return filterChildren$1(steps, c => {
        return c.props.state === currentState;
      })[0];
    }

    return steps[currentStep % steps.length];
  }

  render() {
    const {
      children,
      height,
      ...props
    } = this.props;
    return /*#__PURE__*/React$b.createElement("div", {
      className: "idyll-stepper",
      style: {
        position: 'relative',
        height: height,
        ...props.style
      }
    }, /*#__PURE__*/React$b.createElement("div", {
      className: "idyll-step-graphic"
    }, filterChildren$1(children, c => {
      return c.type.name && c.type.name.toLowerCase() === 'graphic';
    })), /*#__PURE__*/React$b.createElement("div", {
      className: "idyll-step-content"
    }, mapChildren(this.getSelectedStep(), c => {
      return /*#__PURE__*/React$b.cloneElement(c, {
        registerStep: this.registerStep.bind(this)
      });
    })), mapChildren(filterChildren$1(children, c => {
      return c.type.name && c.type.name.toLowerCase() === 'steppercontrol';
    }), c => {
      return /*#__PURE__*/React$b.cloneElement(c, {
        next: this.next.bind(this),
        previous: this.previous.bind(this)
      });
    }));
  }

}

Stepper.defaultProps = {
  currentStep: 0,
  height: 500
};
Stepper._idyll = {
  name: 'Stepper',
  tagType: 'open',
  children: [`
[Graphic fullWidth:true]
  [VegaLite
    data:\`[{x: 0, y: 0}, {x: 1, y: 1}]\`
    spec:\`{
    mark: "line",
    encoding: {
      x: {
        field: "x",
        type: "quantitative"
      },
      y: {
        field: "y",
        type: "quantitative"
      }
    }
  }\`
  width:400
  height:300 /]
[/Graphic]
[Step]Text for step 1[/Step]
[Step]Text for step 2[/Step]
[Step]Text for step 3[/Step]
[StepperControl /]`],
  props: [{
    name: 'currentStep',
    type: 'number',
    example: 'x',
    description: 'The index of the currently selected step.'
  }, {
    name: 'fullWidth',
    type: 'boolean',
    example: 'true',
    description: 'Should this component be full width?.'
  }]
};

const React$2 = require('react');

class StepperControl extends React$2.Component {
  componentDidMount() {}

  render() {
    this.props;
    return /*#__PURE__*/React$2.createElement("div", {
      className: "idyll-stepper-control"
    }, /*#__PURE__*/React$2.createElement("div", {
      className: "idyll-stepper-control-button idyll-stepper-control-button-previous",
      onClick: this.props.previous
    }, "\u2190"), /*#__PURE__*/React$2.createElement("div", {
      className: "idyll-stepper-control-button idyll-stepper-control-button-next",
      onClick: this.props.next
    }, "\u2192")); // (
    //   <div ref={(ref) => this.ref = ref} className={`idyll-step ${className || ''}`}  style={{margin: '10vh 0 60vh 0'}} {...props} />
    // );
  }

}

StepperControl._idyll = {
  name: "StepperControl",
  tagType: "closed"
};

class SVG extends React$b.PureComponent {
  render() {
    const {
      hasError,
      updateProps,
      idyll,
      ...props
    } = this.props;

    if (!this.props.src) {
      return /*#__PURE__*/React$b.createElement("svg", props);
    }

    return /*#__PURE__*/React$b.createElement(InlineSVG, props);
  }

}

SVG.defaultProps = {
  src: ''
};
SVG._idyll = {
  name: 'SVG',
  tagType: 'closed',
  props: [{
    name: 'src',
    type: 'string',
    example: '"https://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg"'
  }]
};

const React$1 = require('react');

const {
  filterChildren
} = require('idyll-component-children');

class Switch extends React$1.Component {
  render() {
    const {
      idyll,
      hasError,
      updateProps,
      value,
      children,
      ...props
    } = this.props;

    if (children) {
      const matchCase = child => child.type.name.toLowerCase() === 'case' && child.props.test === value;

      const matchDefault = child => child.type.name.toLowerCase() === 'default';

      const matchedCase = filterChildren(children, matchCase);
      const defaultCase = filterChildren(children, matchDefault);
      return /*#__PURE__*/React$1.createElement("div", {
        style: props.style
      }, matchedCase.length ? matchedCase : defaultCase);
    }

    return '';
  }

}

Switch._idyll = {
  name: 'Switch',
  tagType: 'open',
  children: [`
    [Case test:0]Case 0[/Case]
    [Case test:1]Case 1[/Case]
    [Default]Default case[/Default]
  `],
  props: [{
    name: 'value',
    type: 'variable',
    example: 'x',
    description: 'Value of the child prop to render.'
  }]
};

const React = require('react');
const styles = {
  CELL: {
    flex: '1',
    width: '100px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  ROW: {
    display: 'inline-flex',
    flexGrow: '1'
  },
  PAGINATION: {
    display: 'flex',
    alignItems: 'stretch',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
    padding: '3px',
    boxSizing: 'border-box',
    boxShadow: '0 0 15px 0 rgb(0 0 0 / 10%)',
    borderTop: '2px solid rgba(0,0,0,0.1)'
  },
  BUTTON_ENABLED: {
    boxSizing: 'border-box',
    margin: 0,
    border: 0,
    borderRadius: '3px',
    padding: '6px',
    fontSize: '1em',
    color: 'rgba(0, 0, 0, 0.6)',
    background: 'rgba(0, 0, 0, 0.1)',
    cursor: 'pointer',
    width: '100%'
  },
  BUTTON_DISABLED: {
    boxSizing: 'border-box',
    margin: 0,
    border: 0,
    borderRadius: '3px',
    padding: '6px',
    fontSize: '1em',
    color: 'rgba(0, 0, 0, 0.6)',
    background: 'rgba(0, 0, 0, 0.1)',
    cursor: 'pointer',
    width: '100%',
    opacity: 0.5,
    cursor: 'default'
  },
  PAGINATION_CONTROL: {
    display: 'flex',
    flex: 1,
    textAlign: 'center'
  },
  PAGINATION_CENTER: {
    display: 'flex',
    flex: 1.5,
    flexWrap: 'wrap',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  NO_ROWS_CONTAINER: {
    textAlign: 'center',
    opacity: '0.5',
    borderBottom: '1px solid #000',
    lineHeight: '0.1em',
    margin: '10px 0 20px'
  },
  NO_ROWS_CONTENT: {
    background: 'white',
    padding: '0 10px'
  }
};
/**
 * Given a new table page number and the table's page
 * count, returns the correct page number within
 * the page count bounds
 * @param {number} newPageNumber the new page number
 * @param {number} pageCount the table's page count
 * @returns a page number within the page count bounds
 */

const getPageNumber = (newPageNumber, pageCount) => {
  if (newPageNumber <= 0) {
    return 1;
  } else if (newPageNumber > pageCount) {
    return pageCount;
  } else {
    return newPageNumber;
  }
};

const TableComponent = props => {
  const [pageJumpValue, setPageJumpValue] = React.useState(1);

  if (!props.data && props.value) {
    props.data = props.value;
  } // create data and columns


  const data = React.useMemo(() => props.data, [props.data]);
  const columns = React.useMemo(() => {
    if ((props.data || []).length) {
      return Object.keys(props.data[0]).filter(d => d !== '').map(d => {
        return {
          Header: d,
          accessor: d
        };
      });
    }

    return [];
  }, [props.data]);
  const rowSizes = React.useMemo(() => {
    const sizes = [5, 10, 20, 25, 50, 100];

    if (!sizes.includes(props.defaultPageSize)) {
      sizes.unshift(props.defaultPageSize);
    }

    return sizes;
  }, [props.defaultPageSize]);
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    // pagination
    page,
    canPreviousPage,
    canNextPage,
    pageCount,
    nextPage,
    previousPage,
    gotoPage,
    setPageSize,
    state: {
      pageIndex,
      pageSize
    }
  } = useTable({
    columns,
    data,
    initialState: {
      pageIndex: 0,
      pageSize: props.defaultPageSize
    }
  }, useSortBy, usePagination);

  const onPageJump = e => {
    e.stopPropagation();
    let value = e.target.value;

    if (value != '') {
      value = getPageNumber(Number(value), pageCount);
    }

    gotoPage(value === '' ? pageIndex : Number(value) - 1);
    setPageJumpValue(value);
  };

  const onInputBlur = () => {
    if (pageJumpValue === '') {
      // prevent page from jumping to 0
      setPageJumpValue(pageIndex + 1);
    }
  };

  const onButtonClick = (callback, increment, canIncrement) => {
    if (canIncrement) {
      callback();
      const newPage = getPageNumber(pageIndex + 1 + increment, pageCount);
      setPageJumpValue(newPage);
    }
  };

  const onSortClick = (callback, e) => {
    e.stopPropagation();
    callback(e);
    setPageJumpValue(1);
  };

  const updateDefaultPageSize = e => {
    e.stopPropagation();
    const newPageSize = Number(e.target.value);
    setPageSize(newPageSize); // page jump handling

    gotoPage(0);
    setPageJumpValue(1);
  };

  return /*#__PURE__*/React.createElement("div", {
    className: 'table-container'
  }, data.length === 0 ? /*#__PURE__*/React.createElement("div", {
    style: styles.NO_ROWS_CONTAINER
  }, /*#__PURE__*/React.createElement("span", {
    style: styles.NO_ROWS_CONTENT
  }, "No Rows Found")) :
  /*#__PURE__*/
  // Table
  React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: `table ${props.className || ''}`
  }, /*#__PURE__*/React.createElement("table", _extends({}, getTableProps(), {
    style: {
      marginBottom: '0'
    }
  }), /*#__PURE__*/React.createElement(TableHeader, {
    columns: columns,
    headerGroups: headerGroups,
    onSortClick: onSortClick
  }), /*#__PURE__*/React.createElement(TableBody, {
    columns: columns,
    getTableBodyProps: getTableBodyProps,
    prepareRow: prepareRow,
    page: page
  }))), /*#__PURE__*/React.createElement("div", {
    className: 'table-pagination',
    style: { ...styles.PAGINATION,
      display: props.data.length > props.defaultPageSize && props.showPagination ? 'flex' : 'none'
    }
  }, /*#__PURE__*/React.createElement(PaginationButton, {
    className: "table-pagination-previous",
    onButtonClick: onButtonClick,
    buttonText: 'Previous',
    pageTurnFunction: previousPage,
    pageTurnIncrement: -1,
    enabled: canPreviousPage
  }), /*#__PURE__*/React.createElement("div", {
    className: "table-pagination-center",
    style: styles.PAGINATION_CENTER
  }, /*#__PURE__*/React.createElement("span", {
    style: {
      display: 'flex',
      alignItems: 'baseline'
    }
  }, "Page", ' ', props.showPageJump ? /*#__PURE__*/React.createElement(PaginationJumpInput, {
    pageCount: pageCount,
    pageJumpValue: pageJumpValue,
    onPageJump: onPageJump,
    onInputBlur: onInputBlur
  }) : pageIndex + 1, ' ', "of ", pageCount), props.showPageSizeOptions ? /*#__PURE__*/React.createElement(PaginationRowSelect, {
    rowOptionValue: pageSize,
    updateDefaultPageSize: updateDefaultPageSize,
    rowSizes: rowSizes
  }) : null), /*#__PURE__*/React.createElement(PaginationButton, {
    className: "table-pagination-next",
    onButtonClick: onButtonClick,
    buttonText: 'Next',
    pageTurnFunction: nextPage,
    pageTurnIncrement: 1,
    enabled: canNextPage
  }))));
};

const TableHeader = props => {
  const {
    columns,
    headerGroups,
    onSortClick
  } = props;
  return /*#__PURE__*/React.createElement("thead", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%',
      minWidth: `${columns.length * 100}px`
    }
  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement("tr", _extends({}, headerGroup.getHeaderGroupProps(), {
    style: styles.ROW
  }), headerGroup.headers.map((column, i) => {
    const sortStyle = column.isSorted ? !column.isSortedDesc ? {
      borderTop: '2px solid black'
    } : {
      borderBottom: '2px solid black'
    } : {};
    const onSort = column.getSortByToggleProps().onClick;
    const sortProps = { ...column.getSortByToggleProps,
      onClick: e => onSortClick(onSort, e)
    };
    return /*#__PURE__*/React.createElement("th", _extends({}, column.getHeaderProps(sortProps), {
      key: `${column.id}-${i}`,
      style: { ...sortStyle,
        ...styles.CELL,
        cursor: 'pointer'
      }
    }), column.render('Header'));
  }))));
};

const TableBody = props => {
  const {
    columns,
    page,
    prepareRow,
    getTableBodyProps
  } = props;
  return /*#__PURE__*/React.createElement("tbody", _extends({}, getTableBodyProps(), {
    style: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%',
      minWidth: `${columns.length * 100}px`
    }
  }), page.map((row, i) => {
    // must call this every render
    prepareRow(row);
    return /*#__PURE__*/React.createElement("tr", _extends({
      key: `${row.id}-${row.cells[0].column.Header}-${i}`
    }, row.getRowProps(), {
      style: styles.ROW
    }), row.cells.map((cell, j) => {
      return /*#__PURE__*/React.createElement("td", _extends({
        key: `${cell.value}-${j}`,
        style: styles.CELL
      }, cell.getCellProps()), cell.render('Cell'));
    }));
  }));
};

const PaginationButton = props => {
  const {
    onButtonClick,
    enabled,
    buttonText,
    pageTurnFunction,
    pageTurnIncrement,
    ...rest
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    style: styles.PAGINATION_CONTROL
  }), /*#__PURE__*/React.createElement("button", {
    onClick: () => onButtonClick(pageTurnFunction, pageTurnIncrement, enabled),
    disabled: !enabled,
    style: enabled ? styles.BUTTON_ENABLED : styles.BUTTON_DISABLED
  }, buttonText));
};

const PaginationJumpInput = props => {
  const {
    pageCount,
    pageJumpValue,
    onPageJump,
    onInputBlur
  } = props;
  return /*#__PURE__*/React.createElement("div", {
    className: "table-pagination-jump"
  }, /*#__PURE__*/React.createElement("input", {
    type: "number",
    style: {
      margin: '10px'
    },
    min: 1,
    max: pageCount,
    value: pageJumpValue,
    onChange: onPageJump,
    onBlur: onInputBlur
  }));
};

const PaginationRowSelect = props => {
  const {
    rowOptionValue,
    updateDefaultPageSize,
    rowSizes
  } = props;
  return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("select", {
    value: rowOptionValue,
    onChange: updateDefaultPageSize
  }, rowSizes.map(size => /*#__PURE__*/React.createElement("option", {
    key: `table-row-size-${size}`,
    value: size
  }, `${size} rows`))));
};

TableComponent.defaultProps = {
  data: [],
  showPageSizeOptions: false,
  showPageJump: false,
  defaultPageSize: 20,
  showPagination: true
};
TableComponent._idyll = {
  name: 'Table',
  tagType: 'closed',
  props: [{
    name: 'data',
    type: 'array',
    description: 'The data to be shown in a table. Should be an array of objects. Alias: data',
    example: '`[{name: "A", value: 0}, {name: "B", value: 5}]`'
  }, {
    name: 'defaultPageSize',
    type: 'number',
    example: '10',
    description: 'The number of datapoints to be shown on a page.',
    defaultValue: '20'
  }, {
    name: 'showPagination',
    type: 'boolean',
    example: 'false',
    description: 'Show next and previous page buttons.',
    defaultValue: 'true'
  }, {
    name: 'showPageSizeOptions',
    type: 'boolean',
    example: 'false',
    description: 'Show options to configure page size.',
    defaultValue: 'false'
  }, {
    name: 'showPageJump',
    type: 'boolean',
    example: 'false',
    description: 'Show page jump option.',
    defaultValue: 'false'
  }]
};

class TextInput extends React$b.PureComponent {
  constructor(props) {
    super(props);
    this.onChange = this.onChange.bind(this);
    this.state = {
      error: {
        msg: '',
        isError: false
      }
    };
  }

  onChange(e) {
    const value = e.target.value || '';
    const pattern = this.props.pattern;
    const patternMismatchMessage = this.props.patternMismatchMessage || `Input value doesn't match pattern`;
    this.props.updateProps({
      value: value
    });

    if (pattern) {
      try {
        if (!value.match(pattern)) {
          throw new Error(patternMismatchMessage);
        }

        this.setState({
          error: {
            msg: '',
            isError: false
          }
        });
      } catch (err) {
        this.setState({
          error: {
            msg: err.message || 'Input value is not valid',
            isError: true
          }
        });
      }
    }
  }

  render() {
    const {
      error
    } = this.state;
    const {
      idyll,
      hasError,
      updateProps,
      ...props
    } = this.props;
    return /*#__PURE__*/React$b.createElement(Fragment, null, /*#__PURE__*/React$b.createElement("input", _extends({
      className: error.isError ? 'idyll-input-error' : '',
      onClick: this.props.onClick || (e => e.stopPropagation()),
      type: "text",
      onChange: this.onChange
    }, props)), error.isError && /*#__PURE__*/React$b.createElement("span", {
      className: "idyll-input-error"
    }, error.msg));
  }

}

TextInput._idyll = {
  name: 'TextInput',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'string',
    example: 'x',
    description: 'The current value of the text entry box.'
  }, {
    name: 'pattern',
    type: 'object',
    example: '/w+/',
    description: 'A regex pattern to validate input field'
  }, {
    name: 'patternMismatchMessage',
    type: 'string',
    example: 'Value doesnt match pattern',
    description: "A string message to display after a pattern mismatch. Default is: 'Input value is not valid'"
  }]
};

class Tweet extends Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: true,
      loadingMessage: 'Loading tweet...'
    };
    this.tweetContainer = /*#__PURE__*/createRef();
    this.loadTweet = this.loadTweet.bind(this);
  }

  isTwttrReady() {
    return !!window['twttr'];
  }

  loadTwttr() {
    return new Promise((resolve, reject) => {
      const twttrEl = document.createElement('script');
      twttrEl.setAttribute('src', `${document.location.protocol === 'file:' ? 'https:' : document.location.protocol}//platform.twitter.com/widgets.js`);

      twttrEl.onload = () => resolve();

      twttrEl.onerror = error => reject(error);

      (document.head || document.body || {
        appendChild: () => {}
      }).appendChild(twttrEl);
    });
  }

  loadTweet() {
    const twttr = window['twttr'];
    const {
      id,
      parameters
    } = this.props;
    twttr.widgets.createTweet('' + id, this.tweetContainer.current, parameters);
    this.setState({
      loading: false
    });
  }

  componentDidMount() {
    if (this.isTwttrReady()) {
      this.loadTweet();
    } else {
      const loadingMessage = `Error loading tweet ${this.props.id}`;
      this.loadTwttr().then(this.loadTweet).catch(() => this.setState({
        loadingMessage
      }));
    }
  }

  render() {
    const {
      loading,
      loadingMessage
    } = this.state;
    return /*#__PURE__*/React$b.createElement("div", {
      ref: this.tweetContainer,
      style: this.props.style ? this.props.style : {
        minHeight: 309,
        marginTop: 10,
        marginBottom: 10
      }
    }, loading && loadingMessage);
  }

}

Tweet.propTypes = {
  id: PropTypes$1.string,
  //Tweet id can be found via url, e.g https://twitter.com/user/status/id
  parameters: PropTypes$1.object //https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-parameter-reference

};
Tweet._idyll = {
  name: 'Tweet',
  tagType: 'closed',
  props: [{
    name: 'id',
    type: 'string',
    example: '"1123077742466031616"',
    description: 'The ID of the Tweet, found in the URL after /status/. Required.'
  }, {
    name: 'parameters',
    type: 'object',
    example: '`{linkColor: "#8342f4"}`',
    description: 'Embedded tweet params. See https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-parameter-reference. Optional'
  }]
};

let YouTube;
const YT_PLAYING = 1;
const YT_PAUSED = 2;

class YoutubeComponent extends React$b.Component {
  constructor(props) {
    super(props);
    this.state = {
      mounted: false
    };
  }

  componentDidMount() {
    this.setState({
      mounted: true
    });
    YouTube = require('react-youtube').default;
  }

  render() {
    if (!this.state.mounted) {
      return null;
    }

    const opts = {
      height: this.props.height,
      width: this.props.width,
      playerVars: Object.assign({}, {
        // https://developers.google.com/youtube/player_parameters
        autoplay: this.props.play
      }, this.props.options)
    };
    const style = this.props.style || {};
    return /*#__PURE__*/React$b.createElement("div", {
      style: {
        minHeight: this.props.height,
        ...style
      }
    }, /*#__PURE__*/React$b.createElement(YouTube, {
      key: this.props.id,
      videoId: this.props.id,
      opts: opts,
      onReady: this._onReady.bind(this)
    }));
  }

  componentDidUpdate(prevProps, prevState) {
    if (this._player && this.props.id !== prevProps.id) ; else {
      // Modify options to the same video
      if (this._player && this.props.play !== prevProps.play) {
        this.props.play ? this._player.playVideo() : this._player.pauseVideo();
      }

      if (this._player && this.props.audio !== prevProps.audio) {
        this.props.audio ? this._player.unMute() : this._player.mute();
      }
    }
  }

  _onReady(event) {
    this._player = event.target;

    if (!this.props.audio) {
      this._player.mute();
    }

    this._player.addEventListener('onStateChange', event => {
      if (event.data === YT_PLAYING && !this.props.play) {
        this.props.updateProps({
          play: true
        });
      } else if (event.data === YT_PAUSED && this.props.play) {
        this.props.updateProps({
          play: false
        });
      }
    });

    this.props.onReady && this.props.onReady();
  }

}

YoutubeComponent._idyll = {
  name: 'Youtube',
  tagType: 'closed',
  props: [{
    name: 'play',
    type: 'boolean',
    example: 'true',
    defaultValue: 'false',
    description: 'Is the video playing?'
  }, {
    name: 'audio',
    type: 'boolean',
    example: 'false',
    defaultValue: 'true',
    description: 'Is the audio turned on?'
  }, {
    name: 'width',
    type: 'integer',
    example: '600',
    description: 'Width of the video.'
  }, {
    name: 'height',
    type: 'integer',
    example: '400',
    description: 'Height of the video.'
  }, {
    name: 'id',
    type: 'string',
    example: '"KnPe6dZuwlg"',
    description: 'YouTube video id. Required.'
  }, {
    name: 'options',
    type: 'object',
    example: '`{ modestbranding: 1 }`',
    defaultValue: '`{}`',
    description: 'Dictionary of extra options. See YouTube docs for all options.'
  }, {
    name: 'onReady',
    type: 'expression',
    description: 'Callback triggered when the video is ready to play.'
  }]
};

export { Action, Analytics, Annotation, Aside, Boolean, Button, Case, Chart, Boolean as Checkbox, Cite, CodeHighlight, Conditional, Default, Desmos, Display, Dynamic, Equation, Fixed, Float, EmbeddedGist as Gist, Graphic, H1, H2, H3, H4, H5, H6, Header, Image$1 as Image, Inline, Link, Loop, Preloader as Preload, Preview, Radio, Range, SVG, Scroller, Select, Step, Stepper, StepperControl, Switch, TableComponent as Table, TextContainer, TextInput, Tweet, YoutubeComponent as Youtube };
