'use strict';

var _extends = require('@babel/runtime/helpers/extends');
var reactTable = require('react-table');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);

const React = require('react');
const styles = {
  CELL: {
    flex: '1',
    width: '100px',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  ROW: {
    display: 'inline-flex',
    flexGrow: '1'
  },
  PAGINATION: {
    display: 'flex',
    alignItems: 'stretch',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
    padding: '3px',
    boxSizing: 'border-box',
    boxShadow: '0 0 15px 0 rgb(0 0 0 / 10%)',
    borderTop: '2px solid rgba(0,0,0,0.1)'
  },
  BUTTON_ENABLED: {
    boxSizing: 'border-box',
    margin: 0,
    border: 0,
    borderRadius: '3px',
    padding: '6px',
    fontSize: '1em',
    color: 'rgba(0, 0, 0, 0.6)',
    background: 'rgba(0, 0, 0, 0.1)',
    cursor: 'pointer',
    width: '100%'
  },
  BUTTON_DISABLED: {
    boxSizing: 'border-box',
    margin: 0,
    border: 0,
    borderRadius: '3px',
    padding: '6px',
    fontSize: '1em',
    color: 'rgba(0, 0, 0, 0.6)',
    background: 'rgba(0, 0, 0, 0.1)',
    cursor: 'pointer',
    width: '100%',
    opacity: 0.5,
    cursor: 'default'
  },
  PAGINATION_CONTROL: {
    display: 'flex',
    flex: 1,
    textAlign: 'center'
  },
  PAGINATION_CENTER: {
    display: 'flex',
    flex: 1.5,
    flexWrap: 'wrap',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  NO_ROWS_CONTAINER: {
    textAlign: 'center',
    opacity: '0.5',
    borderBottom: '1px solid #000',
    lineHeight: '0.1em',
    margin: '10px 0 20px'
  },
  NO_ROWS_CONTENT: {
    background: 'white',
    padding: '0 10px'
  }
};
/**
 * Given a new table page number and the table's page
 * count, returns the correct page number within
 * the page count bounds
 * @param {number} newPageNumber the new page number
 * @param {number} pageCount the table's page count
 * @returns a page number within the page count bounds
 */

const getPageNumber = (newPageNumber, pageCount) => {
  if (newPageNumber <= 0) {
    return 1;
  } else if (newPageNumber > pageCount) {
    return pageCount;
  } else {
    return newPageNumber;
  }
};

const TableComponent = props => {
  const [pageJumpValue, setPageJumpValue] = React.useState(1);

  if (!props.data && props.value) {
    props.data = props.value;
  } // create data and columns


  const data = React.useMemo(() => props.data, [props.data]);
  const columns = React.useMemo(() => {
    if ((props.data || []).length) {
      return Object.keys(props.data[0]).filter(d => d !== '').map(d => {
        return {
          Header: d,
          accessor: d
        };
      });
    }

    return [];
  }, [props.data]);
  const rowSizes = React.useMemo(() => {
    const sizes = [5, 10, 20, 25, 50, 100];

    if (!sizes.includes(props.defaultPageSize)) {
      sizes.unshift(props.defaultPageSize);
    }

    return sizes;
  }, [props.defaultPageSize]);
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    // pagination
    page,
    canPreviousPage,
    canNextPage,
    pageCount,
    nextPage,
    previousPage,
    gotoPage,
    setPageSize,
    state: {
      pageIndex,
      pageSize
    }
  } = reactTable.useTable({
    columns,
    data,
    initialState: {
      pageIndex: 0,
      pageSize: props.defaultPageSize
    }
  }, reactTable.useSortBy, reactTable.usePagination);

  const onPageJump = e => {
    e.stopPropagation();
    let value = e.target.value;

    if (value != '') {
      value = getPageNumber(Number(value), pageCount);
    }

    gotoPage(value === '' ? pageIndex : Number(value) - 1);
    setPageJumpValue(value);
  };

  const onInputBlur = () => {
    if (pageJumpValue === '') {
      // prevent page from jumping to 0
      setPageJumpValue(pageIndex + 1);
    }
  };

  const onButtonClick = (callback, increment, canIncrement) => {
    if (canIncrement) {
      callback();
      const newPage = getPageNumber(pageIndex + 1 + increment, pageCount);
      setPageJumpValue(newPage);
    }
  };

  const onSortClick = (callback, e) => {
    e.stopPropagation();
    callback(e);
    setPageJumpValue(1);
  };

  const updateDefaultPageSize = e => {
    e.stopPropagation();
    const newPageSize = Number(e.target.value);
    setPageSize(newPageSize); // page jump handling

    gotoPage(0);
    setPageJumpValue(1);
  };

  return /*#__PURE__*/React.createElement("div", {
    className: 'table-container'
  }, data.length === 0 ? /*#__PURE__*/React.createElement("div", {
    style: styles.NO_ROWS_CONTAINER
  }, /*#__PURE__*/React.createElement("span", {
    style: styles.NO_ROWS_CONTENT
  }, "No Rows Found")) :
  /*#__PURE__*/
  // Table
  React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: `table ${props.className || ''}`
  }, /*#__PURE__*/React.createElement("table", _extends__default["default"]({}, getTableProps(), {
    style: {
      marginBottom: '0'
    }
  }), /*#__PURE__*/React.createElement(TableHeader, {
    columns: columns,
    headerGroups: headerGroups,
    onSortClick: onSortClick
  }), /*#__PURE__*/React.createElement(TableBody, {
    columns: columns,
    getTableBodyProps: getTableBodyProps,
    prepareRow: prepareRow,
    page: page
  }))), /*#__PURE__*/React.createElement("div", {
    className: 'table-pagination',
    style: { ...styles.PAGINATION,
      display: props.data.length > props.defaultPageSize && props.showPagination ? 'flex' : 'none'
    }
  }, /*#__PURE__*/React.createElement(PaginationButton, {
    className: "table-pagination-previous",
    onButtonClick: onButtonClick,
    buttonText: 'Previous',
    pageTurnFunction: previousPage,
    pageTurnIncrement: -1,
    enabled: canPreviousPage
  }), /*#__PURE__*/React.createElement("div", {
    className: "table-pagination-center",
    style: styles.PAGINATION_CENTER
  }, /*#__PURE__*/React.createElement("span", {
    style: {
      display: 'flex',
      alignItems: 'baseline'
    }
  }, "Page", ' ', props.showPageJump ? /*#__PURE__*/React.createElement(PaginationJumpInput, {
    pageCount: pageCount,
    pageJumpValue: pageJumpValue,
    onPageJump: onPageJump,
    onInputBlur: onInputBlur
  }) : pageIndex + 1, ' ', "of ", pageCount), props.showPageSizeOptions ? /*#__PURE__*/React.createElement(PaginationRowSelect, {
    rowOptionValue: pageSize,
    updateDefaultPageSize: updateDefaultPageSize,
    rowSizes: rowSizes
  }) : null), /*#__PURE__*/React.createElement(PaginationButton, {
    className: "table-pagination-next",
    onButtonClick: onButtonClick,
    buttonText: 'Next',
    pageTurnFunction: nextPage,
    pageTurnIncrement: 1,
    enabled: canNextPage
  }))));
};

const TableHeader = props => {
  const {
    columns,
    headerGroups,
    onSortClick
  } = props;
  return /*#__PURE__*/React.createElement("thead", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%',
      minWidth: `${columns.length * 100}px`
    }
  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement("tr", _extends__default["default"]({}, headerGroup.getHeaderGroupProps(), {
    style: styles.ROW
  }), headerGroup.headers.map((column, i) => {
    const sortStyle = column.isSorted ? !column.isSortedDesc ? {
      borderTop: '2px solid black'
    } : {
      borderBottom: '2px solid black'
    } : {};
    const onSort = column.getSortByToggleProps().onClick;
    const sortProps = { ...column.getSortByToggleProps,
      onClick: e => onSortClick(onSort, e)
    };
    return /*#__PURE__*/React.createElement("th", _extends__default["default"]({}, column.getHeaderProps(sortProps), {
      key: `${column.id}-${i}`,
      style: { ...sortStyle,
        ...styles.CELL,
        cursor: 'pointer'
      }
    }), column.render('Header'));
  }))));
};

const TableBody = props => {
  const {
    columns,
    page,
    prepareRow,
    getTableBodyProps
  } = props;
  return /*#__PURE__*/React.createElement("tbody", _extends__default["default"]({}, getTableBodyProps(), {
    style: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%',
      minWidth: `${columns.length * 100}px`
    }
  }), page.map((row, i) => {
    // must call this every render
    prepareRow(row);
    return /*#__PURE__*/React.createElement("tr", _extends__default["default"]({
      key: `${row.id}-${row.cells[0].column.Header}-${i}`
    }, row.getRowProps(), {
      style: styles.ROW
    }), row.cells.map((cell, j) => {
      return /*#__PURE__*/React.createElement("td", _extends__default["default"]({
        key: `${cell.value}-${j}`,
        style: styles.CELL
      }, cell.getCellProps()), cell.render('Cell'));
    }));
  }));
};

const PaginationButton = props => {
  const {
    onButtonClick,
    enabled,
    buttonText,
    pageTurnFunction,
    pageTurnIncrement,
    ...rest
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends__default["default"]({}, rest, {
    style: styles.PAGINATION_CONTROL
  }), /*#__PURE__*/React.createElement("button", {
    onClick: () => onButtonClick(pageTurnFunction, pageTurnIncrement, enabled),
    disabled: !enabled,
    style: enabled ? styles.BUTTON_ENABLED : styles.BUTTON_DISABLED
  }, buttonText));
};

const PaginationJumpInput = props => {
  const {
    pageCount,
    pageJumpValue,
    onPageJump,
    onInputBlur
  } = props;
  return /*#__PURE__*/React.createElement("div", {
    className: "table-pagination-jump"
  }, /*#__PURE__*/React.createElement("input", {
    type: "number",
    style: {
      margin: '10px'
    },
    min: 1,
    max: pageCount,
    value: pageJumpValue,
    onChange: onPageJump,
    onBlur: onInputBlur
  }));
};

const PaginationRowSelect = props => {
  const {
    rowOptionValue,
    updateDefaultPageSize,
    rowSizes
  } = props;
  return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("select", {
    value: rowOptionValue,
    onChange: updateDefaultPageSize
  }, rowSizes.map(size => /*#__PURE__*/React.createElement("option", {
    key: `table-row-size-${size}`,
    value: size
  }, `${size} rows`))));
};

TableComponent.defaultProps = {
  data: [],
  showPageSizeOptions: false,
  showPageJump: false,
  defaultPageSize: 20,
  showPagination: true
};
TableComponent._idyll = {
  name: 'Table',
  tagType: 'closed',
  props: [{
    name: 'data',
    type: 'array',
    description: 'The data to be shown in a table. Should be an array of objects. Alias: data',
    example: '`[{name: "A", value: 0}, {name: "B", value: 5}]`'
  }, {
    name: 'defaultPageSize',
    type: 'number',
    example: '10',
    description: 'The number of datapoints to be shown on a page.',
    defaultValue: '20'
  }, {
    name: 'showPagination',
    type: 'boolean',
    example: 'false',
    description: 'Show next and previous page buttons.',
    defaultValue: 'true'
  }, {
    name: 'showPageSizeOptions',
    type: 'boolean',
    example: 'false',
    description: 'Show options to configure page size.',
    defaultValue: 'false'
  }, {
    name: 'showPageJump',
    type: 'boolean',
    example: 'false',
    description: 'Show page jump option.',
    defaultValue: 'false'
  }]
};

module.exports = TableComponent;
