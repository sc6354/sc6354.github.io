'use strict';

var _extends = require('@babel/runtime/helpers/extends');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

class TextInput extends React__default["default"].PureComponent {
  constructor(props) {
    super(props);
    this.onChange = this.onChange.bind(this);
    this.state = {
      error: {
        msg: '',
        isError: false
      }
    };
  }

  onChange(e) {
    const value = e.target.value || '';
    const pattern = this.props.pattern;
    const patternMismatchMessage = this.props.patternMismatchMessage || `Input value doesn't match pattern`;
    this.props.updateProps({
      value: value
    });

    if (pattern) {
      try {
        if (!value.match(pattern)) {
          throw new Error(patternMismatchMessage);
        }

        this.setState({
          error: {
            msg: '',
            isError: false
          }
        });
      } catch (err) {
        this.setState({
          error: {
            msg: err.message || 'Input value is not valid',
            isError: true
          }
        });
      }
    }
  }

  render() {
    const {
      error
    } = this.state;
    const {
      idyll,
      hasError,
      updateProps,
      ...props
    } = this.props;
    return /*#__PURE__*/React__default["default"].createElement(React.Fragment, null, /*#__PURE__*/React__default["default"].createElement("input", _extends__default["default"]({
      className: error.isError ? 'idyll-input-error' : '',
      onClick: this.props.onClick || (e => e.stopPropagation()),
      type: "text",
      onChange: this.onChange
    }, props)), error.isError && /*#__PURE__*/React__default["default"].createElement("span", {
      className: "idyll-input-error"
    }, error.msg));
  }

}

TextInput._idyll = {
  name: 'TextInput',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'string',
    example: 'x',
    description: 'The current value of the text entry box.'
  }, {
    name: 'pattern',
    type: 'object',
    example: '/w+/',
    description: 'A regex pattern to validate input field'
  }, {
    name: 'patternMismatchMessage',
    type: 'string',
    example: 'Value doesnt match pattern',
    description: "A string message to display after a pattern mismatch. Default is: 'Input value is not valid'"
  }]
};

module.exports = TextInput;
