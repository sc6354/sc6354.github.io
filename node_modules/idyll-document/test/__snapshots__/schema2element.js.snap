// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReactJsonSchema can parse a schema 1`] = `
<div>
  <TextContainer
    idyllASTNode={
      Object {
        "children": Array [
          Object {
            "children": Array [
              Object {
                "id": 14,
                "type": "textnode",
                "value": "Welcome to Idyll",
              },
            ],
            "id": 13,
            "name": "h1",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 16,
                "type": "textnode",
                "value": "Idyll is a language for creating interactive documents on the web.",
              },
            ],
            "id": 15,
            "name": "h3",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 18,
                "type": "textnode",
                "value": "This document is being rendered from ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 20,
                    "type": "textnode",
                    "value": "Idyll markup",
                  },
                ],
                "id": 19,
                "name": "strong",
                "type": "component",
              },
              Object {
                "id": 21,
                "type": "textnode",
                "value": ". If you’ve used ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 23,
                    "type": "textnode",
                    "value": "markdown",
                  },
                ],
                "id": 22,
                "name": "a",
                "properties": Object {
                  "href": Object {
                    "type": "value",
                    "value": "https://daringfireball.net/projects/markdown/",
                  },
                },
                "type": "component",
              },
              Object {
                "id": 24,
                "type": "textnode",
                "value": ", Idyll should look pretty familiar, but it has some additional features. Write text in the box on the left and the output on the right will automatically update.",
              },
            ],
            "id": 17,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 26,
                "type": "textnode",
                "value": "To make things a little more interesting you can add JavaScript components to your text.
For example, a ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 28,
                    "type": "textnode",
                    "value": "[Chart /]",
                  },
                ],
                "id": 27,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 29,
                "type": "textnode",
                "value": " component can be used to render a simple visualization:",
              },
            ],
            "id": 25,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 30,
            "name": "Chart",
            "properties": Object {
              "type": Object {
                "type": "value",
                "value": "scatter",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 32,
                "type": "textnode",
                "value": "Try changing the chart’s type from ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 34,
                    "type": "textnode",
                    "value": "scatter",
                  },
                ],
                "id": 33,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 35,
                "type": "textnode",
                "value": " to ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 37,
                    "type": "textnode",
                    "value": "line",
                  },
                ],
                "id": 36,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 38,
                "type": "textnode",
                "value": ", ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 40,
                    "type": "textnode",
                    "value": "area",
                  },
                ],
                "id": 39,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 41,
                "type": "textnode",
                "value": ", or ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 43,
                    "type": "textnode",
                    "value": "pie",
                  },
                ],
                "id": 42,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 44,
                "type": "textnode",
                "value": ".",
              },
            ],
            "id": 31,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 46,
                "type": "textnode",
                "value": "A component’s properties can be strings (“I’m a string!”), numbers (1.569), or evaluated JavaScript expressions (",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 48,
                    "type": "textnode",
                    "value": "\`2 * Math.PI\`",
                  },
                ],
                "id": 47,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 49,
                "type": "textnode",
                "value": ").",
              },
            ],
            "id": 45,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 51,
                "type": "textnode",
                "value": "There are a number of components available — see ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 53,
                    "type": "textnode",
                    "value": "Idyll’s documentation",
                  },
                ],
                "id": 52,
                "name": "a",
                "properties": Object {
                  "href": Object {
                    "type": "value",
                    "value": "https://idyll-lang.github.io/components-built-in",
                  },
                },
                "type": "component",
              },
              Object {
                "id": 54,
                "type": "textnode",
                "value": " for a full list — Additional components can be installed via ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 56,
                    "type": "textnode",
                    "value": "npm",
                  },
                ],
                "id": 55,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 57,
                "type": "textnode",
                "value": " (any React component should work), and if you are comfortable with JavaScript you can write ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 59,
                    "type": "textnode",
                    "value": "custom components",
                  },
                ],
                "id": 58,
                "name": "a",
                "properties": Object {
                  "href": Object {
                    "type": "value",
                    "value": "https://idyll-lang.github.io/components-custom",
                  },
                },
                "type": "component",
              },
              Object {
                "id": 60,
                "type": "textnode",
                "value": " as well.",
              },
            ],
            "id": 50,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 62,
                "type": "textnode",
                "value": "Idyll also provides a reactive variable system that can be used to dynamically update the text based on input from a reader.",
              },
            ],
            "id": 61,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 64,
                "type": "textnode",
                "value": "Instantiating a variable is similar to instantiating a component:",
              },
            ],
            "id": 63,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 66,
                "type": "textnode",
                "value": "[var name:\\"x\\" value:1 /]",
              },
            ],
            "id": 65,
            "name": "code",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 68,
                "type": "textnode",
                "value": "Once you’ve created a variable, it can be displayed inline with text
(x = ",
              },
              Object {
                "children": Array [],
                "id": 69,
                "name": "Display",
                "properties": Object {
                  "var": Object {
                    "type": "variable",
                    "value": "x",
                  },
                },
                "type": "component",
              },
              Object {
                "id": 70,
                "type": "textnode",
                "value": "),
or be used to parameterize components. Derived variables can be used to create values that depend on other variables, similar to a formula in Excel:",
              },
            ],
            "id": 67,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 72,
                "type": "textnode",
                "value": "[derived name:\\"xSquared\\" value:\`x * x\` /]",
              },
            ],
            "id": 71,
            "name": "code",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 74,
                "type": "textnode",
                "value": "Here I bind the value of ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 76,
                    "type": "textnode",
                    "value": "x",
                  },
                ],
                "id": 75,
                "name": "code",
                "type": "component",
              },
              Object {
                "id": 77,
                "type": "textnode",
                "value": " to a range slider. Move the slider and watch the variables update.",
              },
            ],
            "id": 73,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 78,
            "name": "Range",
            "properties": Object {
              "max": Object {
                "type": "value",
                "value": 100,
              },
              "min": Object {
                "type": "value",
                "value": 0,
              },
              "value": Object {
                "type": "variable",
                "value": "x",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "children": Array [
                  Object {
                    "id": 81,
                    "type": "textnode",
                    "value": "x",
                  },
                ],
                "id": 80,
                "name": "equation",
                "type": "component",
              },
              Object {
                "id": 82,
                "type": "textnode",
                "value": ":
 ",
              },
              Object {
                "children": Array [],
                "id": 83,
                "name": "Display",
                "properties": Object {
                  "var": Object {
                    "type": "expression",
                    "value": "x",
                  },
                },
                "type": "component",
              },
            ],
            "id": 79,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "children": Array [
                  Object {
                    "id": 86,
                    "type": "textnode",
                    "value": "x^2",
                  },
                ],
                "id": 85,
                "name": "equation",
                "type": "component",
              },
              Object {
                "id": 87,
                "type": "textnode",
                "value": ":",
              },
              Object {
                "children": Array [],
                "id": 88,
                "name": "Display",
                "properties": Object {
                  "var": Object {
                    "type": "expression",
                    "value": "xSquared",
                  },
                },
                "type": "component",
              },
            ],
            "id": 84,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 90,
                "type": "textnode",
                "value": "Test expression, displays:",
              },
            ],
            "id": 89,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 91,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "varDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": "x",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 92,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "derivedVarDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": "xSquared",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 93,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "derivedVarDisplay2",
              },
              "value": Object {
                "type": "expression",
                "value": "xCubed",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 94,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "strDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": "\\"string\\"",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 95,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "staticObjectDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": "{ static: \\"object\\" }",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 96,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "dynamicObjectDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": "{ dynamic: x }",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 97,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "dataDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": "myData",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 98,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "bareDataDisplay",
              },
              "value": Object {
                "type": "variable",
                "value": "myData",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 99,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "bareVarDisplay",
              },
              "value": Object {
                "type": "variable",
                "value": "x",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 100,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "bareDerivedDisplay",
              },
              "value": Object {
                "type": "variable",
                "value": "xSquared",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 101,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "bareDerivedDisplay2",
              },
              "value": Object {
                "type": "variable",
                "value": "xCubed",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 102,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "objectVarDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": " objectVar ",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 103,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "bareObjectVarDisplay",
              },
              "value": Object {
                "type": "variable",
                "value": "objectVar",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 104,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "arrayVarDisplay",
              },
              "value": Object {
                "type": "expression",
                "value": " arrayVar ",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 105,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "bareArrayVarDisplay",
              },
              "value": Object {
                "type": "variable",
                "value": "arrayVar",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 106,
            "name": "br",
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 108,
                "type": "textnode",
                "value": "Here is an example of how you could use a variable to control the frequency of a sine wave:",
              },
            ],
            "id": 107,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 109,
            "name": "Chart",
            "properties": Object {
              "domain": Object {
                "type": "expression",
                "value": "[0, 2 * Math.PI]",
              },
              "equation": Object {
                "type": "expression",
                "value": "(t) => Math.sin(t * frequency)",
              },
              "samplePoints": Object {
                "type": "value",
                "value": 1000,
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 110,
            "name": "Range",
            "properties": Object {
              "max": Object {
                "type": "expression",
                "value": "2 * Math.PI",
              },
              "min": Object {
                "type": "value",
                "value": 0.5,
              },
              "step": Object {
                "type": "value",
                "value": 0.0001,
              },
              "value": Object {
                "type": "variable",
                "value": "frequency",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "children": Array [],
                "id": 112,
                "name": "Display",
                "properties": Object {
                  "id": Object {
                    "type": "value",
                    "value": "lateVarDisplay",
                  },
                  "value": Object {
                    "type": "variable",
                    "value": "lateVar",
                  },
                },
                "type": "component",
              },
              Object {
                "id": 113,
                "type": "textnode",
                "value": "
Late Var Range:",
              },
            ],
            "id": 111,
            "name": "p",
            "type": "component",
          },
          Object {
            "children": Array [],
            "id": 114,
            "name": "Range",
            "properties": Object {
              "max": Object {
                "type": "value",
                "value": 100,
              },
              "min": Object {
                "type": "value",
                "value": 2,
              },
              "value": Object {
                "type": "variable",
                "value": "lateVar",
              },
            },
            "type": "component",
          },
          Object {
            "children": Array [
              Object {
                "id": 116,
                "type": "textnode",
                "value": "Read more about Idyll at ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 118,
                    "type": "textnode",
                    "value": "https://idyll-lang.github.io/",
                  },
                ],
                "id": 117,
                "name": "a",
                "properties": Object {
                  "href": Object {
                    "type": "value",
                    "value": "https://idyll-lang.github.io/",
                  },
                },
                "type": "component",
              },
              Object {
                "id": 119,
                "type": "textnode",
                "value": ", and come say “Hi!” in our ",
              },
              Object {
                "children": Array [
                  Object {
                    "id": 121,
                    "type": "textnode",
                    "value": "chatroom on gitter",
                  },
                ],
                "id": 120,
                "name": "a",
                "properties": Object {
                  "href": Object {
                    "type": "value",
                    "value": "https://gitter.im/idyll-lang/Lobby",
                  },
                },
                "type": "component",
              },
              Object {
                "id": 122,
                "type": "textnode",
                "value": ".",
              },
            ],
            "id": 115,
            "name": "p",
            "type": "component",
          },
        ],
        "id": 12,
        "name": "TextContainer",
        "type": "component",
      }
    }
  >
    <H1
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 14,
              "type": "textnode",
              "value": "Welcome to Idyll",
            },
          ],
          "id": 13,
          "name": "h1",
          "type": "component",
        }
      }
    >
      Welcome to Idyll
    </H1>
    <H3
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 16,
              "type": "textnode",
              "value": "Idyll is a language for creating interactive documents on the web.",
            },
          ],
          "id": 15,
          "name": "h3",
          "type": "component",
        }
      }
    >
      Idyll is a language for creating interactive documents on the web.
    </H3>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 18,
              "type": "textnode",
              "value": "This document is being rendered from ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 20,
                  "type": "textnode",
                  "value": "Idyll markup",
                },
              ],
              "id": 19,
              "name": "strong",
              "type": "component",
            },
            Object {
              "id": 21,
              "type": "textnode",
              "value": ". If you’ve used ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 23,
                  "type": "textnode",
                  "value": "markdown",
                },
              ],
              "id": 22,
              "name": "a",
              "properties": Object {
                "href": Object {
                  "type": "value",
                  "value": "https://daringfireball.net/projects/markdown/",
                },
              },
              "type": "component",
            },
            Object {
              "id": 24,
              "type": "textnode",
              "value": ", Idyll should look pretty familiar, but it has some additional features. Write text in the box on the left and the output on the right will automatically update.",
            },
          ],
          "id": 17,
          "name": "p",
          "type": "component",
        }
      }
    >
      This document is being rendered from 
      <strong
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 20,
                "type": "textnode",
                "value": "Idyll markup",
              },
            ],
            "id": 19,
            "name": "strong",
            "type": "component",
          }
        }
      >
        Idyll markup
      </strong>
      . If you’ve used 
      <a
        href="https://daringfireball.net/projects/markdown/"
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 23,
                "type": "textnode",
                "value": "markdown",
              },
            ],
            "id": 22,
            "name": "a",
            "properties": Object {
              "href": Object {
                "type": "value",
                "value": "https://daringfireball.net/projects/markdown/",
              },
            },
            "type": "component",
          }
        }
      >
        markdown
      </a>
      , Idyll should look pretty familiar, but it has some additional features. Write text in the box on the left and the output on the right will automatically update.
    </p>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 26,
              "type": "textnode",
              "value": "To make things a little more interesting you can add JavaScript components to your text.
For example, a ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 28,
                  "type": "textnode",
                  "value": "[Chart /]",
                },
              ],
              "id": 27,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 29,
              "type": "textnode",
              "value": " component can be used to render a simple visualization:",
            },
          ],
          "id": 25,
          "name": "p",
          "type": "component",
        }
      }
    >
      To make things a little more interesting you can add JavaScript components to your text.
For example, a 
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 28,
                "type": "textnode",
                "value": "[Chart /]",
              },
            ],
            "id": 27,
            "name": "code",
            "type": "component",
          }
        }
      >
        [Chart /]
      </code>
       component can be used to render a simple visualization:
    </p>
    <Chart
      domain={
        Array [
          -1,
          1,
        ]
      }
      domainPadding={0}
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 30,
          "name": "Chart",
          "properties": Object {
            "type": Object {
              "type": "value",
              "value": "scatter",
            },
          },
          "type": "component",
        }
      }
      range={
        Array [
          -1,
          1,
        ]
      }
      samplePoints={100}
      type="scatter"
    />
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 32,
              "type": "textnode",
              "value": "Try changing the chart’s type from ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 34,
                  "type": "textnode",
                  "value": "scatter",
                },
              ],
              "id": 33,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 35,
              "type": "textnode",
              "value": " to ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 37,
                  "type": "textnode",
                  "value": "line",
                },
              ],
              "id": 36,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 38,
              "type": "textnode",
              "value": ", ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 40,
                  "type": "textnode",
                  "value": "area",
                },
              ],
              "id": 39,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 41,
              "type": "textnode",
              "value": ", or ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 43,
                  "type": "textnode",
                  "value": "pie",
                },
              ],
              "id": 42,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 44,
              "type": "textnode",
              "value": ".",
            },
          ],
          "id": 31,
          "name": "p",
          "type": "component",
        }
      }
    >
      Try changing the chart’s type from 
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 34,
                "type": "textnode",
                "value": "scatter",
              },
            ],
            "id": 33,
            "name": "code",
            "type": "component",
          }
        }
      >
        scatter
      </code>
       to 
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 37,
                "type": "textnode",
                "value": "line",
              },
            ],
            "id": 36,
            "name": "code",
            "type": "component",
          }
        }
      >
        line
      </code>
      , 
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 40,
                "type": "textnode",
                "value": "area",
              },
            ],
            "id": 39,
            "name": "code",
            "type": "component",
          }
        }
      >
        area
      </code>
      , or 
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 43,
                "type": "textnode",
                "value": "pie",
              },
            ],
            "id": 42,
            "name": "code",
            "type": "component",
          }
        }
      >
        pie
      </code>
      .
    </p>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 46,
              "type": "textnode",
              "value": "A component’s properties can be strings (“I’m a string!”), numbers (1.569), or evaluated JavaScript expressions (",
            },
            Object {
              "children": Array [
                Object {
                  "id": 48,
                  "type": "textnode",
                  "value": "\`2 * Math.PI\`",
                },
              ],
              "id": 47,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 49,
              "type": "textnode",
              "value": ").",
            },
          ],
          "id": 45,
          "name": "p",
          "type": "component",
        }
      }
    >
      A component’s properties can be strings (“I’m a string!”), numbers (1.569), or evaluated JavaScript expressions (
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 48,
                "type": "textnode",
                "value": "\`2 * Math.PI\`",
              },
            ],
            "id": 47,
            "name": "code",
            "type": "component",
          }
        }
      >
        \`2 * Math.PI\`
      </code>
      ).
    </p>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 51,
              "type": "textnode",
              "value": "There are a number of components available — see ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 53,
                  "type": "textnode",
                  "value": "Idyll’s documentation",
                },
              ],
              "id": 52,
              "name": "a",
              "properties": Object {
                "href": Object {
                  "type": "value",
                  "value": "https://idyll-lang.github.io/components-built-in",
                },
              },
              "type": "component",
            },
            Object {
              "id": 54,
              "type": "textnode",
              "value": " for a full list — Additional components can be installed via ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 56,
                  "type": "textnode",
                  "value": "npm",
                },
              ],
              "id": 55,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 57,
              "type": "textnode",
              "value": " (any React component should work), and if you are comfortable with JavaScript you can write ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 59,
                  "type": "textnode",
                  "value": "custom components",
                },
              ],
              "id": 58,
              "name": "a",
              "properties": Object {
                "href": Object {
                  "type": "value",
                  "value": "https://idyll-lang.github.io/components-custom",
                },
              },
              "type": "component",
            },
            Object {
              "id": 60,
              "type": "textnode",
              "value": " as well.",
            },
          ],
          "id": 50,
          "name": "p",
          "type": "component",
        }
      }
    >
      There are a number of components available — see 
      <a
        href="https://idyll-lang.github.io/components-built-in"
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 53,
                "type": "textnode",
                "value": "Idyll’s documentation",
              },
            ],
            "id": 52,
            "name": "a",
            "properties": Object {
              "href": Object {
                "type": "value",
                "value": "https://idyll-lang.github.io/components-built-in",
              },
            },
            "type": "component",
          }
        }
      >
        Idyll’s documentation
      </a>
       for a full list — Additional components can be installed via 
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 56,
                "type": "textnode",
                "value": "npm",
              },
            ],
            "id": 55,
            "name": "code",
            "type": "component",
          }
        }
      >
        npm
      </code>
       (any React component should work), and if you are comfortable with JavaScript you can write 
      <a
        href="https://idyll-lang.github.io/components-custom"
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 59,
                "type": "textnode",
                "value": "custom components",
              },
            ],
            "id": 58,
            "name": "a",
            "properties": Object {
              "href": Object {
                "type": "value",
                "value": "https://idyll-lang.github.io/components-custom",
              },
            },
            "type": "component",
          }
        }
      >
        custom components
      </a>
       as well.
    </p>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 62,
              "type": "textnode",
              "value": "Idyll also provides a reactive variable system that can be used to dynamically update the text based on input from a reader.",
            },
          ],
          "id": 61,
          "name": "p",
          "type": "component",
        }
      }
    >
      Idyll also provides a reactive variable system that can be used to dynamically update the text based on input from a reader.
    </p>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 64,
              "type": "textnode",
              "value": "Instantiating a variable is similar to instantiating a component:",
            },
          ],
          "id": 63,
          "name": "p",
          "type": "component",
        }
      }
    >
      Instantiating a variable is similar to instantiating a component:
    </p>
    <code
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 66,
              "type": "textnode",
              "value": "[var name:\\"x\\" value:1 /]",
            },
          ],
          "id": 65,
          "name": "code",
          "type": "component",
        }
      }
    >
      [var name:"x" value:1 /]
    </code>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 68,
              "type": "textnode",
              "value": "Once you’ve created a variable, it can be displayed inline with text
(x = ",
            },
            Object {
              "children": Array [],
              "id": 69,
              "name": "Display",
              "properties": Object {
                "var": Object {
                  "type": "variable",
                  "value": "x",
                },
              },
              "type": "component",
            },
            Object {
              "id": 70,
              "type": "textnode",
              "value": "),
or be used to parameterize components. Derived variables can be used to create values that depend on other variables, similar to a formula in Excel:",
            },
          ],
          "id": 67,
          "name": "p",
          "type": "component",
        }
      }
    >
      Once you’ve created a variable, it can be displayed inline with text
(x = 
      <Display
        __vars__={
          Object {
            "var": "x",
          }
        }
        idyllASTNode={
          Object {
            "children": Array [],
            "id": 69,
            "name": "Display",
            "properties": Object {
              "var": Object {
                "type": "variable",
                "value": "x",
              },
            },
            "type": "component",
          }
        }
        var="x"
      />
      ),
or be used to parameterize components. Derived variables can be used to create values that depend on other variables, similar to a formula in Excel:
    </p>
    <code
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 72,
              "type": "textnode",
              "value": "[derived name:\\"xSquared\\" value:\`x * x\` /]",
            },
          ],
          "id": 71,
          "name": "code",
          "type": "component",
        }
      }
    >
      [derived name:"xSquared" value:\`x * x\` /]
    </code>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 74,
              "type": "textnode",
              "value": "Here I bind the value of ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 76,
                  "type": "textnode",
                  "value": "x",
                },
              ],
              "id": 75,
              "name": "code",
              "type": "component",
            },
            Object {
              "id": 77,
              "type": "textnode",
              "value": " to a range slider. Move the slider and watch the variables update.",
            },
          ],
          "id": 73,
          "name": "p",
          "type": "component",
        }
      }
    >
      Here I bind the value of 
      <code
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 76,
                "type": "textnode",
                "value": "x",
              },
            ],
            "id": 75,
            "name": "code",
            "type": "component",
          }
        }
      >
        x
      </code>
       to a range slider. Move the slider and watch the variables update.
    </p>
    <Range
      __vars__={
        Object {
          "value": "x",
        }
      }
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 78,
          "name": "Range",
          "properties": Object {
            "max": Object {
              "type": "value",
              "value": 100,
            },
            "min": Object {
              "type": "value",
              "value": 0,
            },
            "value": Object {
              "type": "variable",
              "value": "x",
            },
          },
          "type": "component",
        }
      }
      max={100}
      min={0}
      step={1}
      value="x"
    />
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "children": Array [
                Object {
                  "id": 81,
                  "type": "textnode",
                  "value": "x",
                },
              ],
              "id": 80,
              "name": "equation",
              "type": "component",
            },
            Object {
              "id": 82,
              "type": "textnode",
              "value": ":
 ",
            },
            Object {
              "children": Array [],
              "id": 83,
              "name": "Display",
              "properties": Object {
                "var": Object {
                  "type": "expression",
                  "value": "x",
                },
              },
              "type": "component",
            },
          ],
          "id": 79,
          "name": "p",
          "type": "component",
        }
      }
    >
      <Equation
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 81,
                "type": "textnode",
                "value": "x",
              },
            ],
            "id": 80,
            "name": "equation",
            "type": "component",
          }
        }
      >
        x
      </Equation>
      :
 
      <Display
        __expr__={
          Object {
            "var": "x",
          }
        }
        idyllASTNode={
          Object {
            "children": Array [],
            "id": 83,
            "name": "Display",
            "properties": Object {
              "var": Object {
                "type": "expression",
                "value": "x",
              },
            },
            "type": "component",
          }
        }
        var="x"
      />
    </p>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "children": Array [
                Object {
                  "id": 86,
                  "type": "textnode",
                  "value": "x^2",
                },
              ],
              "id": 85,
              "name": "equation",
              "type": "component",
            },
            Object {
              "id": 87,
              "type": "textnode",
              "value": ":",
            },
            Object {
              "children": Array [],
              "id": 88,
              "name": "Display",
              "properties": Object {
                "var": Object {
                  "type": "expression",
                  "value": "xSquared",
                },
              },
              "type": "component",
            },
          ],
          "id": 84,
          "name": "p",
          "type": "component",
        }
      }
    >
      <Equation
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 86,
                "type": "textnode",
                "value": "x^2",
              },
            ],
            "id": 85,
            "name": "equation",
            "type": "component",
          }
        }
      >
        x^2
      </Equation>
      :
      <Display
        __expr__={
          Object {
            "var": "xSquared",
          }
        }
        idyllASTNode={
          Object {
            "children": Array [],
            "id": 88,
            "name": "Display",
            "properties": Object {
              "var": Object {
                "type": "expression",
                "value": "xSquared",
              },
            },
            "type": "component",
          }
        }
        var="xSquared"
      />
    </p>
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 90,
              "type": "textnode",
              "value": "Test expression, displays:",
            },
          ],
          "id": 89,
          "name": "p",
          "type": "component",
        }
      }
    >
      Test expression, displays:
    </p>
    <Display
      __expr__={
        Object {
          "value": "x",
        }
      }
      id="varDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 91,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "varDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": "x",
            },
          },
          "type": "component",
        }
      }
      value="x"
    />
    <Display
      __expr__={
        Object {
          "value": "xSquared",
        }
      }
      id="derivedVarDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 92,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "derivedVarDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": "xSquared",
            },
          },
          "type": "component",
        }
      }
      value="xSquared"
    />
    <Display
      __expr__={
        Object {
          "value": "xCubed",
        }
      }
      id="derivedVarDisplay2"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 93,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "derivedVarDisplay2",
            },
            "value": Object {
              "type": "expression",
              "value": "xCubed",
            },
          },
          "type": "component",
        }
      }
      value="xCubed"
    />
    <Display
      __expr__={
        Object {
          "value": "\\"string\\"",
        }
      }
      id="strDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 94,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "strDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": "\\"string\\"",
            },
          },
          "type": "component",
        }
      }
      value="\\"string\\""
    />
    <Display
      __expr__={
        Object {
          "value": "{ static: \\"object\\" }",
        }
      }
      id="staticObjectDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 95,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "staticObjectDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": "{ static: \\"object\\" }",
            },
          },
          "type": "component",
        }
      }
      value="{ static: \\"object\\" }"
    />
    <Display
      __expr__={
        Object {
          "value": "{ dynamic: x }",
        }
      }
      id="dynamicObjectDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 96,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "dynamicObjectDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": "{ dynamic: x }",
            },
          },
          "type": "component",
        }
      }
      value="{ dynamic: x }"
    />
    <Display
      __expr__={
        Object {
          "value": "myData",
        }
      }
      id="dataDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 97,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "dataDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": "myData",
            },
          },
          "type": "component",
        }
      }
      value="myData"
    />
    <Display
      __vars__={
        Object {
          "value": "myData",
        }
      }
      id="bareDataDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 98,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "bareDataDisplay",
            },
            "value": Object {
              "type": "variable",
              "value": "myData",
            },
          },
          "type": "component",
        }
      }
      value="myData"
    />
    <Display
      __vars__={
        Object {
          "value": "x",
        }
      }
      id="bareVarDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 99,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "bareVarDisplay",
            },
            "value": Object {
              "type": "variable",
              "value": "x",
            },
          },
          "type": "component",
        }
      }
      value="x"
    />
    <Display
      __vars__={
        Object {
          "value": "xSquared",
        }
      }
      id="bareDerivedDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 100,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "bareDerivedDisplay",
            },
            "value": Object {
              "type": "variable",
              "value": "xSquared",
            },
          },
          "type": "component",
        }
      }
      value="xSquared"
    />
    <Display
      __vars__={
        Object {
          "value": "xCubed",
        }
      }
      id="bareDerivedDisplay2"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 101,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "bareDerivedDisplay2",
            },
            "value": Object {
              "type": "variable",
              "value": "xCubed",
            },
          },
          "type": "component",
        }
      }
      value="xCubed"
    />
    <Display
      __expr__={
        Object {
          "value": " objectVar ",
        }
      }
      id="objectVarDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 102,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "objectVarDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": " objectVar ",
            },
          },
          "type": "component",
        }
      }
      value=" objectVar "
    />
    <Display
      __vars__={
        Object {
          "value": "objectVar",
        }
      }
      id="bareObjectVarDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 103,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "bareObjectVarDisplay",
            },
            "value": Object {
              "type": "variable",
              "value": "objectVar",
            },
          },
          "type": "component",
        }
      }
      value="objectVar"
    />
    <Display
      __expr__={
        Object {
          "value": " arrayVar ",
        }
      }
      id="arrayVarDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 104,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "arrayVarDisplay",
            },
            "value": Object {
              "type": "expression",
              "value": " arrayVar ",
            },
          },
          "type": "component",
        }
      }
      value=" arrayVar "
    />
    <Display
      __vars__={
        Object {
          "value": "arrayVar",
        }
      }
      id="bareArrayVarDisplay"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 105,
          "name": "Display",
          "properties": Object {
            "id": Object {
              "type": "value",
              "value": "bareArrayVarDisplay",
            },
            "value": Object {
              "type": "variable",
              "value": "arrayVar",
            },
          },
          "type": "component",
        }
      }
      value="arrayVar"
    />
    <br
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 106,
          "name": "br",
          "type": "component",
        }
      }
    />
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 108,
              "type": "textnode",
              "value": "Here is an example of how you could use a variable to control the frequency of a sine wave:",
            },
          ],
          "id": 107,
          "name": "p",
          "type": "component",
        }
      }
    >
      Here is an example of how you could use a variable to control the frequency of a sine wave:
    </p>
    <Chart
      __expr__={
        Object {
          "domain": "[0, 2 * Math.PI]",
          "equation": "(t) => Math.sin(t * frequency)",
        }
      }
      domain="[0, 2 * Math.PI]"
      domainPadding={0}
      equation="(t) => Math.sin(t * frequency)"
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 109,
          "name": "Chart",
          "properties": Object {
            "domain": Object {
              "type": "expression",
              "value": "[0, 2 * Math.PI]",
            },
            "equation": Object {
              "type": "expression",
              "value": "(t) => Math.sin(t * frequency)",
            },
            "samplePoints": Object {
              "type": "value",
              "value": 1000,
            },
          },
          "type": "component",
        }
      }
      range={
        Array [
          -1,
          1,
        ]
      }
      samplePoints={1000}
      type="line"
    />
    <Range
      __expr__={
        Object {
          "max": "2 * Math.PI",
        }
      }
      __vars__={
        Object {
          "value": "frequency",
        }
      }
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 110,
          "name": "Range",
          "properties": Object {
            "max": Object {
              "type": "expression",
              "value": "2 * Math.PI",
            },
            "min": Object {
              "type": "value",
              "value": 0.5,
            },
            "step": Object {
              "type": "value",
              "value": 0.0001,
            },
            "value": Object {
              "type": "variable",
              "value": "frequency",
            },
          },
          "type": "component",
        }
      }
      max="2 * Math.PI"
      min={0.5}
      step={0.0001}
      value="frequency"
    />
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "children": Array [],
              "id": 112,
              "name": "Display",
              "properties": Object {
                "id": Object {
                  "type": "value",
                  "value": "lateVarDisplay",
                },
                "value": Object {
                  "type": "variable",
                  "value": "lateVar",
                },
              },
              "type": "component",
            },
            Object {
              "id": 113,
              "type": "textnode",
              "value": "
Late Var Range:",
            },
          ],
          "id": 111,
          "name": "p",
          "type": "component",
        }
      }
    >
      <Display
        __vars__={
          Object {
            "value": "lateVar",
          }
        }
        id="lateVarDisplay"
        idyllASTNode={
          Object {
            "children": Array [],
            "id": 112,
            "name": "Display",
            "properties": Object {
              "id": Object {
                "type": "value",
                "value": "lateVarDisplay",
              },
              "value": Object {
                "type": "variable",
                "value": "lateVar",
              },
            },
            "type": "component",
          }
        }
        value="lateVar"
      />
      
Late Var Range:
    </p>
    <Range
      __vars__={
        Object {
          "value": "lateVar",
        }
      }
      idyllASTNode={
        Object {
          "children": Array [],
          "id": 114,
          "name": "Range",
          "properties": Object {
            "max": Object {
              "type": "value",
              "value": 100,
            },
            "min": Object {
              "type": "value",
              "value": 2,
            },
            "value": Object {
              "type": "variable",
              "value": "lateVar",
            },
          },
          "type": "component",
        }
      }
      max={100}
      min={2}
      step={1}
      value="lateVar"
    />
    <p
      idyllASTNode={
        Object {
          "children": Array [
            Object {
              "id": 116,
              "type": "textnode",
              "value": "Read more about Idyll at ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 118,
                  "type": "textnode",
                  "value": "https://idyll-lang.github.io/",
                },
              ],
              "id": 117,
              "name": "a",
              "properties": Object {
                "href": Object {
                  "type": "value",
                  "value": "https://idyll-lang.github.io/",
                },
              },
              "type": "component",
            },
            Object {
              "id": 119,
              "type": "textnode",
              "value": ", and come say “Hi!” in our ",
            },
            Object {
              "children": Array [
                Object {
                  "id": 121,
                  "type": "textnode",
                  "value": "chatroom on gitter",
                },
              ],
              "id": 120,
              "name": "a",
              "properties": Object {
                "href": Object {
                  "type": "value",
                  "value": "https://gitter.im/idyll-lang/Lobby",
                },
              },
              "type": "component",
            },
            Object {
              "id": 122,
              "type": "textnode",
              "value": ".",
            },
          ],
          "id": 115,
          "name": "p",
          "type": "component",
        }
      }
    >
      Read more about Idyll at 
      <a
        href="https://idyll-lang.github.io/"
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 118,
                "type": "textnode",
                "value": "https://idyll-lang.github.io/",
              },
            ],
            "id": 117,
            "name": "a",
            "properties": Object {
              "href": Object {
                "type": "value",
                "value": "https://idyll-lang.github.io/",
              },
            },
            "type": "component",
          }
        }
      >
        https://idyll-lang.github.io/
      </a>
      , and come say “Hi!” in our 
      <a
        href="https://gitter.im/idyll-lang/Lobby"
        idyllASTNode={
          Object {
            "children": Array [
              Object {
                "id": 121,
                "type": "textnode",
                "value": "chatroom on gitter",
              },
            ],
            "id": 120,
            "name": "a",
            "properties": Object {
              "href": Object {
                "type": "value",
                "value": "https://gitter.im/idyll-lang/Lobby",
              },
            },
            "type": "component",
          }
        }
      >
        chatroom on gitter
      </a>
      .
    </p>
  </TextContainer>
</div>
`;
